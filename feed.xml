<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on  </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://zhu327.github.io/</link>
    <language>zh-cn</language>
    
    
    <updated>Tue, 03 Sep 2024 10:55:52 &#43;0800</updated>
    
    <item>
      <title>About</title>
      <link>https://zhu327.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://zhu327.github.io/about/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;朱小一&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;job&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Python backend engineer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;contact&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;zhu327@gmail.com&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;social network&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;weibo&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://weibo.com/zhu327&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;instagram&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://www.instagram.com/zhu327/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;github&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://github.com/zhu327&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>以Vaultwarden为例使用SQLite Litestream实现无数据库服务</title>
      <link>https://zhu327.github.io/2024/09/03/%E4%BB%A5vaultwarden%E4%B8%BA%E4%BE%8B%E4%BD%BF%E7%94%A8sqlite-litestream%E5%AE%9E%E7%8E%B0%E6%97%A0%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Tue, 03 Sep 2024 10:55:52 &#43;0800</pubDate>
      
      <guid>https://zhu327.github.io/2024/09/03/%E4%BB%A5vaultwarden%E4%B8%BA%E4%BE%8B%E4%BD%BF%E7%94%A8sqlite-litestream%E5%AE%9E%E7%8E%B0%E6%97%A0%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%8D%E5%8A%A1/</guid>
      <description>&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;

&lt;p&gt;Vaultwarden是一个非官方实现的Bitwarden Server，用于密码管理，支持Web端、桌面端和移动端。它支持多种数据来存储数据，包括SQLite、PostgreSQL和MySQL等。当我们想把它部署在一个容器服务平台时，如果容器服务本身没有提供持久挂载的卷，那我们就只能使用PostgreSQL或者MySQL外部数据来存储数据。&lt;/p&gt;

&lt;p&gt;但是我们并不想额外再买资源来运行一个数据库，那我们就可以使用SQLite来存储数据，并且使用Litestream来实现容灾备份。这样虽然容器服务没有持久存储，但是数据还是安全的。下面以Vaultwarden为例，使用SQLite和Litestream来实现无数据库服务。其它可以使用SQLite的程序也可以使用这种方式来实现无数据库服务。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-litestream-yml&#34;&gt;1. litestream.yml&lt;/h3&gt;

&lt;p&gt;Litesream是一个开源的SQLite数据库备份工具，它使用Go语言开发。它可以监控一个SQLite数据库文件的变化，并且将变化记录到S3、MinIO等对象存储服务上。它巧妙的使用了SQLite的WAL（Write-Ahead Logging）机制，来记录数据库的变化，并流式地将这些变化记录到对象存储服务上，达到实时备份的目的。在服务启前，Litestream可以从对象存储服务上恢复数据到SQLite数据库文件中。它的实现原理可以参考&lt;a href=&#34;https://litestream.io/how-it-works/&#34;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在使用Litestream时，我们需要准备一个S3兼容的对象存储，这里以Cloudflare R2为例，我们需要准备一个&lt;code&gt;litestream.yml&lt;/code&gt;的配置文件，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;dbs&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;path&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/data/db.sqlite3&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;replicas&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;type&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;s3&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;endpoint&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;${REPLICA_URL}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;bucket&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sqlite&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;/data/db.sqlite3&lt;/code&gt; 是Vaultwarden的SQLite数据库文件路径，&lt;code&gt;REPLICA_URL&lt;/code&gt;是对象存储服务的地址，比如 &lt;code&gt;https://&amp;lt;cloudflare-account-id&amp;gt;.r2.cloudflarestorage.com&lt;/code&gt;，我们需要在Cloudflare R2上创建一个&lt;code&gt;sqlite&lt;/code&gt;的存储桶。&lt;/p&gt;

&lt;h3 id=&#34;2-entrypoint-sh&#34;&gt;2. entrypoint.sh&lt;/h3&gt;

&lt;p&gt;我们还需要准备一个&lt;code&gt;entrypoint.sh&lt;/code&gt;的脚本文件，用于启动Liestream和Vaultwarden服务。内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -e

&lt;span class=&#34;c1&#34;&gt;# Set the directory of the database in a variable
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DB_PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/data/db.sqlite3

&lt;span class=&#34;c1&#34;&gt;# Restore the database if it does not already exist.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -f &lt;span class=&#34;nv&#34;&gt;$DB_PATH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Database already exists, skipping restore&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;No database found, restoring from replica if exists&amp;#34;&lt;/span&gt;
	litestream restore -if-replica-exists -config /etc/litestream.yml &lt;span class=&#34;nv&#34;&gt;$DB_PATH&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Litestream replicate database and start vaultwarden
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;exec litestream&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; litestream replicate -exec &lt;span class=&#34;s2&#34;&gt;&amp;#34;/start.sh&amp;#34;&lt;/span&gt; -config /etc/litestream.yml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在启动Vaultwarden服务前，我们首先检查SQLite数据库文件是否存在，如果不存在则从对象存储服务上恢复数据。&lt;/p&gt;

&lt;h3 id=&#34;3-dockerfile&#34;&gt;3. Dockerfile&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; litestream/litestream:latest AS litestream&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; vaultwarden/server:latest&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;COPY --from&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;litestream /usr/local/bin/litestream /usr/local/bin/litestream&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;COPY --chmod&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;755&lt;/span&gt; entrypoint.sh /usr/bin/entrypoint.sh&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;COPY litestream.yml /etc/litestream.yml&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; [&amp;#34;/usr/bin/entrypoint.sh&amp;#34;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样会打一个新的镜像把Litestream和Vaultwarden服务一起打包，并且使用&lt;code&gt;entrypoint.sh&lt;/code&gt;启动服务。&lt;/p&gt;

&lt;h3 id=&#34;4-启动服务&#34;&gt;4. 启动服务&lt;/h3&gt;

&lt;p&gt;我们还要准备一个.env文件，用于设置环境变量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;LITESTREAM_ACCESS_KEY_ID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;cloudflare-r2-access-key-id&amp;gt;
&lt;span class=&#34;nv&#34;&gt;LITESTREAM_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;cloudflare-r2-access-key&amp;gt;
&lt;span class=&#34;nv&#34;&gt;PUSH_ENABLED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;PUSH_INSTALLATION_ID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;push-installation-id&amp;gt;
&lt;span class=&#34;nv&#34;&gt;PUSH_INSTALLATION_KEY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;push-installation-key&amp;gt;
&lt;span class=&#34;nv&#34;&gt;PUSH_RELAY_BASE_URI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;https://push.bitwarden.com
&lt;span class=&#34;nv&#34;&gt;REPLICA_URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;https://&amp;lt;cloudflare-account-id&amp;gt;.r2.cloudflarestorage.com
&lt;span class=&#34;nv&#34;&gt;SIGNUPS_ALLOWED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;vaulewarden的PUSH配置需要到&lt;a href=&#34;https://bitwarden.com/host/&#34;&gt;这里&lt;/a&gt;申请。&lt;/p&gt;

&lt;p&gt;然后我们就可以使用Docker来启动服务了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -d &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --name bitwarden &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -p &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;:80 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --restart unless-stopped &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --env-file .env &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  vaultwarden/server:latest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样我们就可以在没有持久存储的容器服务上无数据库的运行Vaultwarden服务了，比如GCP Code Run，我们可以把实例数量scale到0，只有流量进来时才启动服务，真正做到只有使用时才付费。&lt;/p&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;我们使用Litestream实现了Vaultwarden的无数据库服务，并且使用Cloudflare R2作为对象存储服务。这样即使容器服务没有持久存储卷，数据也是安全的。类似的思路还可以推广到其它使用SQLite的程序上。比如我们自己开发了一个Django的程序，不依赖外部的数据库服务，也可以使用Litestream来实现容灾备份。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自动化自己的生活：创造自己的小工具</title>
      <link>https://zhu327.github.io/2024/08/30/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%87%AA%E5%B7%B1%E7%9A%84%E7%94%9F%E6%B4%BB%E5%88%9B%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 30 Aug 2024 10:55:52 &#43;0800</pubDate>
      
      <guid>https://zhu327.github.io/2024/08/30/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%87%AA%E5%B7%B1%E7%9A%84%E7%94%9F%E6%B4%BB%E5%88%9B%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</guid>
      <description>&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;

&lt;p&gt;作为一位程序员，我写的大部分当然都是用来赚钱生活的代码，赚钱的代码都是非常规范的，一般都是复杂业务逻辑在程序上映射，很多时候都只有在解决了复杂的业务问题，才能获得打怪升级的成就感。&lt;/p&gt;

&lt;p&gt;但是我也会在业余时间学习一些工作无关的技术，比如最近半年我学习了Rust，每当我学习一门新的技术，我总是希望把之前实现的一些程序改用新技术来实现，这样就可以更快的上手。平常生活中也没什么用到Rust的场景，那就只能先把之前用Bash，Python写的小工具用Rust重写一遍。然后最近我也自己发掘了一些生活上的场景，这些场景很多时候都是重复的，手动的，如果能改成自动化能够节省很多时间。想起了不知道哪里看过的一个说法：懒惰是程序员的第一生产力，因为懒，我们会把各种重复手动的工作自动化。&lt;/p&gt;

&lt;p&gt;下面的内容就是我在今年自动化生活的一部分，通过自己创造的这些小工具，我解决了自己生活中的一些小痛点。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-自动追番&#34;&gt;1. 自动追番&lt;/h3&gt;

&lt;p&gt;早前我在家里的开发板上搭建了Jellyfin, Sonarr用来追美剧，效果还是不错的，自动下载自动整理文件，自动削刮海报。Sonarr依赖的Indexer服务是一个搭建在fly.io平台上的Prowlarr服务，把Prowlarr搭建在外网，可以避免国内网络访问的限制。&lt;/p&gt;

&lt;p&gt;这套方案对于美剧来说已经非常完美了，但是我除了看美剧，还喜欢看日本动漫，由于Sonarr对于番组的中文支持不好，我在网络上也找了一些方案，都不是特别满意，所以我都是手动在蜜柑计划上找磁力链，然后手动下载。&lt;/p&gt;

&lt;p&gt;因为我很懒，所以我就学习了一下Prowlarr的API，写了一个小工具，每小时自动从Prowlarr上搜索蜜柑计划的索引，通过我在配置中填写的关键字，找到符合条件的番组，然后触发自动下载，如果触发了下载还可以配置通过ntfy.sh发送通知到手机，这样就不会漏掉我订阅的番组。&lt;/p&gt;

&lt;p&gt;代码地址：&lt;a href=&#34;https://github.com/zhu327/ani-sub&#34;&gt;https://github.com/zhu327/ani-sub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;代码很逻辑很简单，只是一些API的调用，如果感兴趣可以自己看看。&lt;/p&gt;

&lt;p&gt;为了方便没有自己服务器的朋友，我还开发一个可以部署在Cloudflare Workers的版本：&lt;a href=&#34;https://github.com/zhu327/ani-sub/tree/workers&#34;&gt;https://github.com/zhu327/ani-sub/tree/workers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个版本由于没有配置文件，需要依赖Cloudflare D1数据库，可以在Cloudflare网站上编辑D1数据库的数据来添加修改自己订阅的番组关键字。&lt;/p&gt;

&lt;h3 id=&#34;2-自动生成rss-ai摘要&#34;&gt;2. 自动生成RSS AI摘要&lt;/h3&gt;

&lt;p&gt;我在fly.io平台上搭建了自己的RSS订阅服务Miniflux，并且还在Vercel平台上搭建了自己的RSSHub服务。随着订阅的RSS源越来越多，我一般在浏览器上使用ChatGPT总结助手来生成文章摘要来快速阅读。但是这样每次打开文章，都需要我自己手动点击一下来生成摘要，非常麻烦，所以在网络上找了Minifux与OpenAI相关的话题，但是并没有找到一个合适的方案。直到我在v2ex看到一个网友分享的他用Python实现的一个旁路服务，通过Miniflux的API遍历文章，然后通过OpenAI的API生成摘要，再保存到Miniflux中。那我也可以用Rust实现一个类似的服务，并且可以部署在Cloudflare Workers上。还可以利用到 Cloudflare Workers AI的免费模型来生成摘要。&lt;/p&gt;

&lt;p&gt;代码地址：&lt;a href=&#34;https://github.com/zhu327/miniflux-ai&#34;&gt;https://github.com/zhu327/miniflux-ai&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;现在对于比较长的新闻，我一般都只看AI摘要了，只有有兴趣的文章才会阅读全文，并且在手机上也可以方便的阅读到AI摘要。&lt;/p&gt;

&lt;h3 id=&#34;3-自动翻译hacknews-rss&#34;&gt;3. 自动翻译HackNews RSS&lt;/h3&gt;

&lt;p&gt;作为一位程序员，我建议每个程序员都应该关注HackNews，了解下每天的业界新闻。网络上已经有了HackNews RSS源&lt;a href=&#34;https://hnrss.github.io&#34;&gt;https://hnrss.github.io&lt;/a&gt;，但是每天的信息太多，我一般只看标题，英文的标题会影响我的阅读，所以我需要一个自动翻译的HackNews RSS源。正好前几个月Cloudflare Workers开始支持Python，所以我就用Python实现了一个利用微软azure翻译API自动翻译的HackNews RSS源。微软azure翻译API是有免费额度，每天可以翻译10万字符，对于HackNews来说已经足够了。&lt;/p&gt;

&lt;p&gt;代码地址：&lt;a href=&#34;https://github.com/zhu327/workers-hnrss&#34;&gt;https://github.com/zhu327/workers-hnrss&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-自动检测aws-cloudfront-新加坡-ddns&#34;&gt;4. 自动检测AWS Cloudfront 新加坡 DDNS&lt;/h3&gt;

&lt;p&gt;由于一些特殊的需求，我需要保证一个域名一直指向AWS Cloudfront的新加坡的IP上，但是Cloudfront的IP地址是动态的，一段时间可能失效，需要找新的IP地址。所以我就写了一个小工具，每小时检测一次Cloudfront的IP地址是否有效，如果不可达，则自动找到新的IP地址，并且更新DNS记录。&lt;/p&gt;

&lt;p&gt;整个逻辑是这样的：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;查询DNSPod的DNS记录，获取老的IP地址&lt;/li&gt;
&lt;li&gt;http 访问这个 IP地址，如果不可达&lt;/li&gt;
&lt;li&gt;通过&lt;a href=&#34;https://sg-sin.doh.sb/dns-query&#34;&gt;https://sg-sin.doh.sb/dns-query&lt;/a&gt;这个DOH查询一个新的新加坡的IP地址&lt;/li&gt;
&lt;li&gt;通过DNSPod的API更新DNS记录&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;刚开始这个小工具是用Bash写的并通过crontab运行在我的服务器上，后来为了练习Rust，我就用Rust重写了这个工具，并且部署在Cloudflare Workers上。&lt;/p&gt;

&lt;h3 id=&#34;5-gemini-openai-proxy&#34;&gt;5. Gemini OpenAI Proxy&lt;/h3&gt;

&lt;p&gt;去年我用Golang写了个一个Gemini的OpenAI代理服务&lt;a href=&#34;https://github.com/zhu327/gemini-openai-proxy&#34;&gt;https://github.com/zhu327/gemini-openai-proxy&lt;/a&gt;，并且部署在fly.io平台上。但是其实用的也挺少的，还占了fly.io的实例资源。所以我就想找一个serveless的版本来替代这个工具，然后就找了这个支持Cloudflare Workers的Gemini代理：&lt;a href=&#34;https://github.com/PublicAffairs/openai-gemini&#34;&gt;https://github.com/PublicAffairs/openai-gemini&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但是呢Cloudflare Workers在国内是被屏蔽了的，所以我就把这个小工具部署到deno deploy上，国内可以无痛访问。&lt;/p&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;除了工作，我们在生活中也会有一些重复性的工作，如果能自动化，那么就可以节省很多时间。作为程序员我们可以利用现有的免费资源，来创造自己的小工具，让我们的生活更美好。&lt;/p&gt;

&lt;p&gt;Cloudflare Workers, deno deploy，fly.io都有一些免费的资源可以利用，可以让我们零成本实现一些小工具。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ChromeOS Flex使用体验</title>
      <link>https://zhu327.github.io/2024/08/02/chromeos-flex%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Fri, 02 Aug 2024 10:55:52 &#43;0800</pubDate>
      
      <guid>https://zhu327.github.io/2024/08/02/chromeos-flex%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</guid>
      <description>&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;

&lt;p&gt;由于MacBook带到新公司作为办公本使用，又因为不喜欢带电脑上下班，所以在家里就只好启用6年前在前公司领用的第一台笔记本ThinkPad X1 Carbon (6th Gen)，这是一台 i5 8250u/8G Ram/256G SSD/2K14‘ 配置的笔记本，默认使用Windows 10操作系统。这台电脑已经很老了，肉眼可见的在浏览网页时会卡，所以想看看有什么可以拯救一下老电脑的方法，要么直接上Linux，然后各种折腾配置，各种可能面对的问题，高分屏之类的。然后另外一个选择就是Chrome OS Flex，Google官方支持，与其说这是个操作系统，还不如说除了浏览器，这个系统就啥也没有了，当然还可以跑一个lxc容器的Debian。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://support.google.com/chromeosflex/answer/11513094?hl=zh-Hans&#34;&gt;Google认证设备列表&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可以看到这台ThinkPad X1 Carbon (6th Gen)可以官方支持到2028年，非常不错，所以就可以开始折腾了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://support.google.com/chromeosflex/answer/11541904?hl=zh-Hans&amp;amp;ref_topic=11551271&amp;amp;sjid=9842639522054919015-AP&#34;&gt;ChromeOS Flex安装指南&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先要保证有一个能可靠的访问Google的网络环境，建议从以上安装指南的下半部分开始，直接下载&lt;a href=&#34;https://dl.google.com/chromeos-flex/images/latest.bin.zip&#34;&gt;最新的 ChromeOS Flex 安装程序映像&lt;/a&gt;，然后使用&lt;a href=&#34;https://rufus.ie/zh/&#34;&gt;Refus 工具&lt;/a&gt;刷写镜像到U盘中。&lt;/p&gt;

&lt;p&gt;通过U盘启动电脑，很快就可以安装好ChromeOS Flex了，然后你会发现你得到了一个只有Chrome浏览器的电脑，是的只有浏览器，别的啥也没有了，可以说是安装Chrome浏览器送了一个空壳操作系统。当然轻量化的操作系统带来的好处就是Chrome浏览网页的体验是真的丝滑，完全不像一台6年前的电脑。除了Chrome浏览器，这个操作系统还可以通过lxc容器的方式启动一个Debian虚拟容器，进而可以在这个Debian环境下安装各种Linux App。&lt;/p&gt;

&lt;h3 id=&#34;debian&#34;&gt;Debian&lt;/h3&gt;

&lt;p&gt;在ChromeOS Flex下的设置中启用Debian后就可以开始在Debian环境下折腾了，我的目标其实很简单，安装vscode写代码，安装视频播放器偶尔看看电影，如何能安装Linux原生的微信就更好了，然后就进入了折腾模式。&lt;/p&gt;

&lt;p&gt;参考文章：&lt;a href=&#34;https://blog.skihome.xyz/archives/5/&#34;&gt;打造一台适合生产的Chromebook&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;更换国内镜像源&#34;&gt;更换国内镜像源&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo vim /etc/apt/sources.list&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把&lt;code&gt;http://deb.debian.org/&lt;/code&gt;替换成&lt;code&gt;https://mirrors.cloud.tencent.com/&lt;/code&gt;，然后更新&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt upgrade&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;linux本地化之中文环境&#34;&gt;Linux本地化之中文环境&lt;/h4&gt;

&lt;p&gt;给Linux安排一个中文环境可以帮助我们更加优雅地使用Linux程序。&lt;/p&gt;

&lt;p&gt;首先，点开终端程序，执行以下指令进行中文字体的安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt install fonts-noto-cjk fonts-wqy-microhei fonts-wqy-zenhei&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来需要配置默认locale，输入如下指令并选择zh_CN.UTF-8。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo dpkg-reconfigure locales&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在终端上关闭Linux，然后重新打开，即可看到程序默认使用中文显示。&lt;/p&gt;

&lt;h4 id=&#34;gtk下的中文显示&#34;&gt;GTK下的中文显示&lt;/h4&gt;

&lt;p&gt;在我们使用一些gtk的程序时，可能会感觉中文字体非常奇怪，看起来非常不舒服。此时我们需要调整gtk默认字体，使程序显示更加优雅。&lt;/p&gt;

&lt;p&gt;首先，我们需要gnome-tweaks这个程序，可以控制gtk的显示效果。&lt;/p&gt;

&lt;p&gt;安装gnome-tweaks：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt install gnome-tweaks&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装后，输入gnome-tweaks启动该程序。在&amp;rdquo;字体&amp;rdquo;选项中，设置&amp;rdquo;界面文本&amp;rdquo;与&amp;rdquo;文档文本&amp;rdquo;分别为&amp;rdquo;Noto Sans CJK SC Regular&amp;rdquo; 和 &amp;ldquo;Noto Sans Regular&amp;rdquo;。其他选项无需修改(修改后可能会导致莫名其妙的后果)。&lt;/p&gt;

&lt;p&gt;自此，大多数GTK程序的中文显示都不会非常奇怪。设置完毕后，也可以将其卸载，以便留出更多空间。&lt;/p&gt;

&lt;h4 id=&#34;中文输入法&#34;&gt;中文输入法&lt;/h4&gt;

&lt;p&gt;ChromeOS自带的Linux环境是Debian 11，默认使用的是Wayland协议。在这里我们可以使用fcitx5来作为输入法引擎。&lt;/p&gt;

&lt;p&gt;使用如下指令安装fcitx5：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt install fcitx5 fcitx5-chinese-addons fcitx5-frontend-gtk4 fcitx5-frontend-gtk3 fcitx5-frontend-gtk2 fcitx5-frontend-qt5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后编辑/etc/profile，将下述内容写入配置文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export XMODIFIERS=@im=fcitx  
export GTK_IM_MODULE=fcitx  
export QT_IM_MODULE=fcitx
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo vim /etc/environment&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;XIM=fcitx
XIM_PROGRAM=fcitx
GTK_IM_MODULE=fcitx
QT_IM_MODULE=fcitx
XMODIFIERS=@im=fcitx
SDL_IM_MODULE=fcitx
GLFW_IM_MODULE=fcitx
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo vim /etc/environment.d/wechat.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;GTK_IM_MODULE=fcitx
QT_IM_MODULE=fcitx
XMODIFIERS=@im=fcitx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来输入 fcitx5-configtool，进入fcitx5的配置页面。&lt;/p&gt;

&lt;p&gt;将 拼音 移到已左侧，激活拼音输入。点击中间的扳手图标，进入拼音的设置。开启云拼音，并选择Baidu。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo vim ~/.bashrc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;# fcitx5
if [ -z $(pgrep -fo &amp;quot;fcitx5&amp;quot;) ]; then
    fcitx5 --disable=wayland -d --verbose &#39;*&#39;=0 &amp;amp;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样在每次打开终端都会启动fcitx5。输入皮肤推荐用&lt;a href=&#34;https://github.com/catppuccin/fcitx5&#34;&gt;catppuccin-mocha&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;网上的资料中会推荐把启动命令放到&lt;code&gt;.sommelierrc&lt;/code&gt;，但是我在使用中发现放到这个文件下，会导致使用输入法时会产生一些奇怪的跳动，所以最终选择放到&lt;code&gt;~/.bashrc&lt;/code&gt;来启动。&lt;/p&gt;

&lt;h4 id=&#34;视频播放器-mpv&#34;&gt;视频播放器 mpv&lt;/h4&gt;

&lt;p&gt;在MacOS是我已经习惯使用IINA播放器，这是一个基于mpv的套壳播放器，在Windows上我们一般使用PotPlayer，然而在Debian上我没有找到特别合适的播放器，试过了几个以后还是选择直接使用mpv，由于在Debian容器中，没有很好的GPU支持，查找了很多资料，最后发现了这个&lt;a href=&#34;https://wiki.archlinuxcn.org/wiki/Chrome_OS_devices/Crostini#%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE&#34;&gt;https://wiki.archlinuxcn.org/wiki/Chrome_OS_devices/Crostini#%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE&lt;/a&gt;，然后在参考了一些mpv的配置最后有了一下配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir -p ~/.config/mpv
vim ~/.config/mpv/mpv.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;#设置置顶播放
ontop=yes

# 设定程序启动后的默认音量
volume=100

# 使字幕输出在黑边上
sub-ass-force-margins=yes

# 开启色彩管理
blend-subtitles=video

# 硬件渲染
vo=gpu
ao=alsa

# 记忆上次播放的位置
save-position-on-quit

# 音轨配置
audio-file-auto=fuzzy
sub-auto=fuzzy
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;vim ~/.config/mpv/input.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;# 全屏切换(回车键及小键盘确认键)
Enter    cycle fullscreen
KP_ENTER  cycle fullscreen

# 双击左键 播放/暂停
MBTN_LEFT_DBL  cycle pause

# 滚轮上下滑动调节音量
WHEEL_UP      add volume 5
WHEEL_DOWN    add volume -5

# 空格键 播放/暂停
SPACE cycle pause

# 静音
m cycle mute

# 查看文件信息
TAB script-binding stats/display-stats
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在系统的文件管理器下可以直接使用系统自带的影音播放器播放视频，这时候会使用系统的硬件解码，非常省电，但是在有些不支持的格式，以及需要加载外挂字幕的情况下可以选择使用mpv播放，经过以上设置，4K电影也能正常播放。&lt;/p&gt;

&lt;h4 id=&#34;微信&#34;&gt;微信&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt install libatomic1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从&lt;a href=&#34;https://github.com/lovechoudoufu/wechat_for_linux/releases&#34;&gt;https://github.com/lovechoudoufu/wechat_for_linux/releases&lt;/a&gt;下载最新的微信deb包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo dpkg -i wechat-beta_1.0.0.238_amd64_login.deb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为之前已经配置了输入法，安装完就可以完美使用了。&lt;/p&gt;

&lt;h4 id=&#34;vscode&#34;&gt;VSCode&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/blogs/2020/12/03/chromebook-get-started&#34;&gt;https://code.visualstudio.com/blogs/2020/12/03/chromebook-get-started&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;按以上指引安装即可，输入法支持正常。&lt;/p&gt;

&lt;h3 id=&#34;其它&#34;&gt;其它&lt;/h3&gt;

&lt;p&gt;ChromeOS Flex内置的输入法其实也是可以在Linux App上使用的，可以参考这篇文章&lt;a href=&#34;https://zonble.medium.com/%E5%9C%A8-crostini-%E4%BD%BF%E7%94%A8-chrome-os-%E7%9A%84%E8%BC%B8%E5%85%A5%E6%B3%95-fb1d226de273&#34;&gt;在 Crostini 當中使用 Chrome OS 的輸入法&lt;/a&gt;，但是我配置了之后发现只能在VSCode上使用，支持不了微信，所以还是选择使用fctix5。&lt;/p&gt;

&lt;p&gt;另外还有一些&lt;code&gt;chrome://flags&lt;/code&gt;可以选择配置：&lt;/p&gt;

&lt;p&gt;开启超线程：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#scheduler-configuration
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开启多线程下载：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#enable-parallel-downloading
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开启Debian的GPU支持&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#crostini-gpu-support
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;回顾一下我在家里使用电脑的情况，其实90%以上的时间都是在使用网页浏览器，其它偶尔看看电影啥的，在家里也不存在需要生产力的问题，现在这台老电脑足以提供Chrome浏览器下丝滑的体验。偶尔要写写代码，看看电影，也可以使用Linux App来实现。ChromeOS Flex提供对老电脑支持的一个相比其它Linux发行版不是那么折腾的选项。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从鹅厂大佬身上学技术</title>
      <link>https://zhu327.github.io/2024/05/10/%E4%BB%8E%E9%B9%85%E5%8E%82%E5%A4%A7%E4%BD%AC%E8%BA%AB%E4%B8%8A%E5%AD%A6%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Fri, 10 May 2024 10:55:52 &#43;0800</pubDate>
      
      <guid>https://zhu327.github.io/2024/05/10/%E4%BB%8E%E9%B9%85%E5%8E%82%E5%A4%A7%E4%BD%AC%E8%BA%AB%E4%B8%8A%E5%AD%A6%E6%8A%80%E6%9C%AF/</guid>
      <description>&lt;p&gt;2018下半年我加入鹅厂，2019年调岗到现在的组，一直跟着鹅厂11级大佬做事，为了提升自己能力，我开始学习大佬的做事方式，我发现大佬的能力往往体现在他的思维的层次上，简单的说就是解决某个问题的时候，我当时可能只看到第2层，但是大佬已经想到第4层上去了，这期间我也找大佬聊过天，也有一些收获，在这里通过一些具体的事例来分析一下大佬的技术能力。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;重复琐碎的工作&#34;&gt;重复琐碎的工作&lt;/h3&gt;

&lt;p&gt;我所在的项目是一个公共的平台项目，对外提供api对接服务，不可避免的就一直有些OnCall的工作，在项目初期，也是各种app对接的高峰期，我每天的工作时间基本上都被各种咨询，各种问题所占用，文档也写了，各种FAQ也说明了。但是由于平台本身模型的复杂性，问题总是在重复。考核周期一盘点，发现实际产出相比以往有所降低，复盘我处理这些OnCall工作的方式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;写文档，持续更新文档&lt;/li&gt;
&lt;li&gt;写FAQ，持续整理并更新&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么问题出现在哪里呢，从大佬开始参与项目开始，这些OnCall的事项成了项目重点需要解决的问题，大佬首先要求我学习业界优秀的开源项目文档写作方式，整理平台项目文档的最佳实践。我在阅读了相关文档，以及文档写作经验后，找到了平台项目写文档的最佳实践：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;QuickStart：这部分内容写一个简短的demo来为读者提供一个快速启动的导览&lt;/li&gt;
&lt;li&gt;HowTo：以用户的角度他可能碰到的一些问题的场景来说明如何进行&lt;/li&gt;
&lt;li&gt;Explanation：一些约定的名词概念，为什么要这么做的说明&lt;/li&gt;
&lt;li&gt;Reference：最后是一些关联的文档，api的docs，性能测试报告，FAQ等等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在基于以上文档结构重新整理的文档后，用户反馈接入流程清晰了很多，不同需求的用户都能在QuickStart的基础上结合HowTo来实现自己的需求。&lt;/p&gt;

&lt;p&gt;针对用户的各种疑难问题，大佬要求我除了整理FAQ以外还要分析FAQ中的一些问题是否能通过自动化来解决，是否能让用户自行通过工具解决，在分析了一些共性的问题后，我找了2个可以实现工具的点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;针对接口逻辑难以调试的点，在用户调用接口的入口点增加debug开关，在api的执行逻辑中如果开启debug，就一路收集相关信息，直接把调试信息返回给用户，使得用户可以自行调试&lt;/li&gt;
&lt;li&gt;针对又一些需要手动修改数据的操作，整理相关操作，写个一个简单的助手app，使得用户能自助处理问题&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过以上措施，原本的OnCall工作所占用的时间减少了60%，那么是不是就完美了呢，大佬说不是，大佬要求我想一想为什么总是会有这么多的咨询量，是不是项目本身的设计的模型就是有问题，就算没有问题，有没有什么方式能让用户减少咨询。&lt;/p&gt;

&lt;p&gt;然后我开始重新复盘项目的功能。咨询量大的根因在于项目本身需求的复杂度，用户对接的时候是有很高的理解成本的，造成了咨询量很大，但是需求的复杂度暂时是没有办法降低的，只能和产品同学一起想办法，最后我推动产品一起做了一个可视化接入的app，帮助用户组在可视化接入流程中理解接入流程，生成数据。虽然这个app不能覆盖100%的场景，但是对于70%以上的简单需求足以覆盖。&lt;/p&gt;

&lt;p&gt;到这里OnCall的工作终于不再占用我太多的时间了，让我们来总结下我当时的思维层次:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一层：用户问什么解决什么&lt;/li&gt;
&lt;li&gt;第二层：总结文档，FAQ避免重复回答&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大佬的思维层次：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第三层：抽象工具来解决问题&lt;/li&gt;
&lt;li&gt;第四层：识别业务本身的问题，推动业务改进&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;能想到第几层实际就体现了技术能力哪里，技术能力是一种以解决某种问题为目标的思路、方法与执行手段，其本质就是解决问题的能力。在编程领域，就是对遇到的业务问题进行抽象、提炼以及逻辑的构建，通过研发工具以提升解决问题的效能，减低人工低效的重复工作。&lt;/p&gt;

&lt;h3 id=&#34;抽象复杂的工作&#34;&gt;抽象复杂的工作&lt;/h3&gt;

&lt;p&gt;随着业务的发展，我们的项目对接的app也越来越多，我们是一个公共平台，需求的推进往往以通用需求为主，但是对接的app有各种各样，需求各不相同，导致用户虽然对接了，但是很多特有的需求又要自己实现，为了满足这类用户的诉求，我开始专项访谈抱怨的用户，了解他们的需求，针对性的解决。&lt;/p&gt;

&lt;p&gt;但是大佬提示我，有一些用户虽然没有抱怨，不代表没有需求，应该做一个问卷广泛收集意见，安排专人处理。&lt;/p&gt;

&lt;p&gt;进一步要从收集的意见中提炼需求，提炼价值，从架构与产品的角度寻找原因，拆解任务，制定实施计划。&lt;/p&gt;

&lt;p&gt;到这里是不是完了呢，大佬说其实更应该从组织架构，从年度目标上从收益最大化的角度，从培养团队的角度全局思考这些收集的意见，综合考量。当然这里就比较高层次了，需要更多的思考。&lt;/p&gt;

&lt;p&gt;总结下这里工作的思考层次：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一层：有什么问题解决什么问题&lt;/li&gt;
&lt;li&gt;第二层：广泛收集，专人跟进解决问题&lt;/li&gt;
&lt;li&gt;第三层：抽象业务需求，改进产品与架构&lt;/li&gt;
&lt;li&gt;第四层：从业务发展，个人发展，组织发展的角度思考业务演进的方向&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们需要从业务发展与自我发展与组织发展的角度来思考如何处理各种复杂抽象的工作，避免只知道接需求，成为一个项目经理，只知道通过任务来跟踪进度。&lt;/p&gt;

&lt;h3 id=&#34;关键决策&#34;&gt;关键决策&lt;/h3&gt;

&lt;p&gt;在与大佬的合作过程中我一直有一个疑问，就是项目推进的过程中，有一些关键的决策是怎么确定的，比如在某个时间点大佬要求我们必须重新整理代码层次，抽象新的代码编码规范，但是这个事情其实短期来看并不会看到有收益，可能从老板的角度来看这都不算产出。在一次聊天中，我提出了我的疑问，大佬从3个角度帮我解了惑：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;有所坚持：有一些原则自己必须坚持，比如对代码的架构，代码的整洁&lt;/li&gt;
&lt;li&gt;长期主义：项目可能会长时间的在自己手里维护，所以需要看远一点，否则坑的还是自己&lt;/li&gt;
&lt;li&gt;向上汇报：要让leader知道你在做什么以及这么做的必要性，获取leader的支持&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在与大佬合作的这几年中，通过观察大佬的工作方式，我学到了很多。编程能力是程序员的核心基础能力，但是只是能力的一部份，我们还要提高我们的思维层次，提高效率，增加产出。软技能也很重要，表达能力，沟通能力，项目管理能力都是程序员需要关注的技能点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>玩转 HackNews：如何正确订阅科技新闻</title>
      <link>https://zhu327.github.io/2024/04/10/%E7%8E%A9%E8%BD%AC-hacknews%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E8%AE%A2%E9%98%85%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/</link>
      <pubDate>Wed, 10 Apr 2024 10:55:52 &#43;0800</pubDate>
      
      <guid>https://zhu327.github.io/2024/04/10/%E7%8E%A9%E8%BD%AC-hacknews%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E8%AE%A2%E9%98%85%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/</guid>
      <description>&lt;p&gt;近日，我在探索 HackNews 的过程中，收获了大量的新知识。然而，我发现自动订阅的 HackNews RSS 源并没有对热门话题进行筛选，导致我的 RSS 阅读器里充斥着我不感兴趣的话题。于是，我开始寻找适合自己的 HackNews RSS 订阅源。在众多选择中，我发现了 &lt;a href=&#34;https://hnrss.org/newest?points=100&#34;&gt;https://hnrss.org/newest?points=100&lt;/a&gt;，这个源只推送热门话题，非常适合我。然而，由于全英文阅读有些繁琐，我又找到了 &lt;a href=&#34;https://rsstranslator.com/&#34;&gt;https://rsstranslator.com/&lt;/a&gt; 这个提供翻译服务的网站，能将 HackNews 翻译成中文标题，非常便捷。但不幸的是，由于访问量过大，该网站已关闭服务并开源代码。在尝试了各种工具后未果，我决定自己动手解决这个问题。然而，我又不希望维护独立的服务，而刚好 &lt;a href=&#34;https://blog.cloudflare.com/python-workers&#34;&gt;Cloudflare Workers 开始支持 Python&lt;/a&gt;，于是我决定使用 Cloudflare Workers 来实现这个服务。在评估了各种翻译 API 后，我选择了 Microsoft Azure 翻译 API，实现了免费翻译的功能。最终，我完成了这个项目 &lt;a href=&#34;https://github.com/zhu327/workers-hnrss&#34;&gt;workers-hnrss&lt;/a&gt;，并且完全零成本部署。但在部署过程中，我发现 Cloudflare Workers 还不支持 &lt;code&gt;requirements.txt&lt;/code&gt;，不过据他们的文档称，再过几周就会支持，所以我决定再等等，然后就可以在我的 RSS 阅读器上读到中文标题的 HackNews 了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;在寻找 HackNews RSS 的过程中，我还发现了 &lt;a href=&#34;https://hackernewsrecap.buzzsprout.com/&#34;&gt;https://hackernewsrecap.buzzsprout.com/&lt;/a&gt;，这是一个由 AI 生成的每日 HackNews 语音摘要播客。然而，同样是全英文的，我曾考虑通过 TTS 将其转换为文本，然后使用 Gemini API 翻译成中文，并定时推送成 HackNews 中文摘要播客。但在评估了各种 TTS API 后，发现长语音转文本的成本有点大，并且工程难度也不小，所以我放弃了这个想法。然而，最近我发现有人已经实现了我想做的事，并且中文效果相当流畅。并且有伴随语音和图文内容，非常不错。而且 RSSHub 也支持将其转换为 RSS，所以我也在 RSS 阅读器上订阅了这个内容。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.xiaoyuzhoufm.com/podcast/6456fdfc0a8e51c73e68d0cd&#34;&gt;https://www.xiaoyuzhoufm.com/podcast/6456fdfc0a8e51c73e68d0cd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;通过以上这些订阅，我能及时了解到国外各种热门科技话题，而且是在中文环境中。有时候，在网络上找不到解决方案时，我们应该动动自己的脑筋，写些代码来解决问题。现在的互联网有各种免费资源，我们完全可以充分利用，通过这些资源改善我们的生活。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2023年阅读分享：深度挖掘编程之道</title>
      <link>https://zhu327.github.io/2024/01/10/2023%E5%B9%B4%E9%98%85%E8%AF%BB%E5%88%86%E4%BA%AB%E6%B7%B1%E5%BA%A6%E6%8C%96%E6%8E%98%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/</link>
      <pubDate>Wed, 10 Jan 2024 10:55:52 &#43;0800</pubDate>
      
      <guid>https://zhu327.github.io/2024/01/10/2023%E5%B9%B4%E9%98%85%E8%AF%BB%E5%88%86%E4%BA%AB%E6%B7%B1%E5%BA%A6%E6%8C%96%E6%8E%98%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/</guid>
      <description>&lt;p&gt;作为一个热衷于技术的程序员博主，我在2023年迎来了全新的阅读体验，将RSS作为我的主要信息源，并通过订阅Hacker News热门主题，持续深入英文技术文章的阅读。在这个过程中，我发现了一些真正精彩的文章，这些不仅仅是知识的积累，更是对编程之路的深刻思考。在这里，我将其中一些我认为值得分享的文章整理出来，推荐给各位看官，希望你们在学习中找到灵感，不断进步。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;基础篇&#34;&gt;&lt;strong&gt;基础篇&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://tontinton.com/posts/database-fundementals/&#34;&gt;Database Fundamentals&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在这篇文章中，作者深入浅出地介绍了数据库基础知识，对于构建稳健的数据存储系统至关重要。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://iq.thc.org/how-does-linux-start-a-process&#34;&gt;How does Linux start a process&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;深入理解Linux启动过程，从操作系统的角度探究进程的创建机制，对于理解底层原理有着重要的启发。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://labs.iximiuz.com/tutorials/container-networking-from-scratch&#34;&gt;How Container Networking Works - Building a Linux Bridge Network From Scratch&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;这篇教程详细讲解了如何从零开始构建一个Linux桥接网络，深入了解容器网络背后的原理。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.kawabangga.com/posts/5330&#34;&gt;有关 TLS/SSL 证书的一切&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对于网络安全至关重要的TLS/SSL证书，本文涵盖了与之相关的方方面面，是一份权威的参考资料。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://ibraheem.ca/posts/too-many-web-servers/&#34;&gt;Learning Async Rust With Entirely Too Many Web Servers&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rust语言异步编程的学习之旅，通过构建多个Web服务器的过程，帮助读者更好地理解异步编程的精髓。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;技巧篇&#34;&gt;&lt;strong&gt;技巧篇&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://johnnymetz.com/posts/slow-django-database-queries/&#34;&gt;Supercharge Your Django App: 7 Sneaky Tricks to Crush Slow Database Queries&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Django应用性能优化的七个技巧，解决慢查询问题，提升应用的响应速度。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.europython.eu/kraken-technologies-how-we-organize-our-very-large-pythonmonolith/&#34;&gt;Kraken Technologies: How we organize our very large Python monolith&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kraken Technologies分享了他们是如何组织庞大的Python单体应用的，对于大型项目的架构设计有很好的借鉴价值。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.b-list.org/weblog/2022/dec/19/boring-python-code-quality/&#34;&gt;Boring Python: code quality&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通过讲解“无聊”的Python代码如何提高代码质量，本文强调了代码可读性和可维护性的重要性。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://sharats.me/posts/shell-script-best-practices/&#34;&gt;Shell Script Best Practices&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shell脚本最佳实践，帮助你写出更加健壮和可维护的Shell脚本，提高命令行工具的质量。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.willett.io/posts/precepts/&#34;&gt;How to Build Software like an SRE&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;以SRE（Site Reliability Engineering）的视角，分享了构建高可用软件的原则和实践，对于追求系统稳定性的开发者尤为重要。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;通识篇&#34;&gt;&lt;strong&gt;通识篇&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.huxiu.com/article/2440157.html&#34;&gt;OpenAI官方指南：如何让ChatGPT输出更好的结果？&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;了解如何利用OpenAI的ChatGPT模型获得更优质的输出结果，对于与自然语言处理相关的开发者有着实际指导意义。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.luu.io/posts/mature-engineer&#34;&gt;One common behavior seen in “mature” software engineers&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;本文探讨了“成熟”软件工程师中常见的一些行为，对于追求职业发展和技术成熟度的读者有很好的启示。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://huyenchip.com/2023/01/24/what-we-look-for-in-a-candidate.html&#34;&gt;What we look for in a resume&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;针对简历中的关键要素，分享了招聘者在候选人中寻找的特质，是一份实用的求职指南。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://jimmyislive.dev/posts/how-to-prioritize/&#34;&gt;How To Prioritize Tasks ?&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;学会如何合理优先级地处理任务，提高工作效率，这对于任何一位程序员都是必备的生存技能。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些建议的阅读材料希望能够为你在编程之路上提供新的思路和技能，让我们共同进步，迎接2024年更多的技术挑战！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>透明代理实践：技术小结与方案演进</title>
      <link>https://zhu327.github.io/2023/12/23/%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%AE%9E%E8%B7%B5%E6%8A%80%E6%9C%AF%E5%B0%8F%E7%BB%93%E4%B8%8E%E6%96%B9%E6%A1%88%E6%BC%94%E8%BF%9B/</link>
      <pubDate>Sat, 23 Dec 2023 15:25:52 &#43;0800</pubDate>
      
      <guid>https://zhu327.github.io/2023/12/23/%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%AE%9E%E8%B7%B5%E6%8A%80%E6%9C%AF%E5%B0%8F%E7%BB%93%E4%B8%8E%E6%96%B9%E6%A1%88%E6%BC%94%E8%BF%9B/</guid>
      <description>&lt;h3 id=&#34;1-路由拓扑&#34;&gt;1. 路由拓扑&lt;/h3&gt;

&lt;p&gt;在家中，我们采用了中国移动提供的千兆宽带服务，通过移动自带的光猫进行拨号连接。紧随其后是一台搭载OpenWRT系统的路由器，负责管理Wi-Fi以及局域网的网络地址转换（NAT）。由于光猫已占用了192.168.1.1网段，我们将路由器配置为192.168.2.1，以便更好地管理IPv4流量。在IPv4网络中，数据流经过光猫和路由器的双层NAT进行处理。&lt;/p&gt;

&lt;p&gt;对于IPv6网络，由于路由器无法直接获取地址前缀，我们配置了IPv6 DHCP Relay功能，确保局域网内的每个设备都能够获取IPv6地址。&lt;/p&gt;

&lt;p&gt;以下是我们在OpenWRT路由器上的相关配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cat /etc/config/network
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;config interface &lt;span class=&#34;s1&#34;&gt;&amp;#39;lan&amp;#39;&lt;/span&gt;
	option &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;bridge&amp;#39;&lt;/span&gt;
	option ifname &lt;span class=&#34;s1&#34;&gt;&amp;#39;eth0 ra0 ra1 rai0 rai1&amp;#39;&lt;/span&gt;
	option proto &lt;span class=&#34;s1&#34;&gt;&amp;#39;static&amp;#39;&lt;/span&gt;
	option netmask &lt;span class=&#34;s1&#34;&gt;&amp;#39;255.255.255.0&amp;#39;&lt;/span&gt;
	option ipaddr &lt;span class=&#34;s1&#34;&gt;&amp;#39;192.168.2.1&amp;#39;&lt;/span&gt;
	option macaddr &lt;span class=&#34;s1&#34;&gt;&amp;#39;C8:BF:4C:87:EE:68&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里，我们通过将LAN口的MAC地址固定设置，以避免LAN IPv6地址的变化。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cat /etc/config/dhcp
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;config dhcp &lt;span class=&#34;s1&#34;&gt;&amp;#39;lan&amp;#39;&lt;/span&gt;
	option interface &lt;span class=&#34;s1&#34;&gt;&amp;#39;lan&amp;#39;&lt;/span&gt;
	option start &lt;span class=&#34;s1&#34;&gt;&amp;#39;100&amp;#39;&lt;/span&gt;
	option limit &lt;span class=&#34;s1&#34;&gt;&amp;#39;150&amp;#39;&lt;/span&gt;
	option leasetime &lt;span class=&#34;s1&#34;&gt;&amp;#39;12h&amp;#39;&lt;/span&gt;
	option ra_slaac &lt;span class=&#34;s1&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
	list ra_flags &lt;span class=&#34;s1&#34;&gt;&amp;#39;managed-config&amp;#39;&lt;/span&gt;
	list ra_flags &lt;span class=&#34;s1&#34;&gt;&amp;#39;other-config&amp;#39;&lt;/span&gt;
	option ra &lt;span class=&#34;s1&#34;&gt;&amp;#39;relay&amp;#39;&lt;/span&gt;
	option ndp &lt;span class=&#34;s1&#34;&gt;&amp;#39;relay&amp;#39;&lt;/span&gt;
	option dhcpv6 &lt;span class=&#34;s1&#34;&gt;&amp;#39;relay&amp;#39;&lt;/span&gt;
	option force &lt;span class=&#34;s1&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
	list dns &lt;span class=&#34;s1&#34;&gt;&amp;#39;fe80::cabf:4cff:fe87:ee68&amp;#39;&lt;/span&gt;

config dhcp &lt;span class=&#34;s1&#34;&gt;&amp;#39;wan&amp;#39;&lt;/span&gt;
	option interface &lt;span class=&#34;s1&#34;&gt;&amp;#39;wan&amp;#39;&lt;/span&gt;
	option ignore &lt;span class=&#34;s1&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
	option dhcpv6 &lt;span class=&#34;s1&#34;&gt;&amp;#39;relay&amp;#39;&lt;/span&gt;
	option ra &lt;span class=&#34;s1&#34;&gt;&amp;#39;relay&amp;#39;&lt;/span&gt;
	option ndp &lt;span class=&#34;s1&#34;&gt;&amp;#39;relay&amp;#39;&lt;/span&gt;
	option master &lt;span class=&#34;s1&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此处，我们配置了IPv6 DHCP Relay功能，直接从光猫获取IPv6地址，并指定LAN口IPv6地址作为IPv6 DNS通告，以确保局域网内的设备的DNS配置无论是IPv4还是IPv6地址都是OpenWRT路由器。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-dns分流透明代理&#34;&gt;2. DNS分流透明代理&lt;/h3&gt;

&lt;p&gt;为了满足一些特殊需求，我们需要对特定域名进行代理，以确保局域网内的每个设备都能轻松无配置地享受代理服务。为此，我们在OpenWRT路由器上配置了透明代理。&lt;/p&gt;

&lt;p&gt;为了实现只有特定域名走代理的目的，我们首先需要在DNS层面进行分流。下面是一个更为紧凑的DNS分流示意图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/zhu327/zhu327.github.io/assets/873883/594bdd94-3593-4278-8fa8-b8f7067b345e&#34; alt=&#34;Image1&#34; width=&#34;700px&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dnsmasq负责DNS分流，将命中代理域名列表的域名分流到SmartDNS，并将查询的IP放入ipset中。对于直连的域名，直接通过光猫进行DNS查询。&lt;/li&gt;
&lt;li&gt;SmartDNS负责代理域名的DNS查询，通过TCP DNS查询走透明代理到远端的代理服务器上，查询代理服务器上最佳的IP地址。&lt;/li&gt;
&lt;li&gt;ipt2socks是一个将透明代理转换为Socks5代理的小工具，通过这个工具可以降低路由器负载。真正的代理程序运行在局域网内的NAS上。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dnsmasq分流配置示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server=/example.com/127.0.0.1#5335
ipset=/example.com/vpn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，命中分流列表的域名会被发送到SmartDNS，同时查询到的IP地址会被放入ipset vpn中。&lt;/p&gt;

&lt;p&gt;SmartDNS配置示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind :5335 -no-dualstack-selection -no-speed-check -force-aaaa-soa

server-tcp 8.8.8.8
server-tcp 1.1.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SmartDNS将UDP DNS查询转换为TCP DNS查询，通过iptables路由到ipt2socks，最终在远端的代理服务器上查询。SmartDNS还强制执行SOA IPv6的DNS查询，以防止代理流量通过IPv6直接走到光猫而绕过路由器NAT。&lt;/p&gt;

&lt;p&gt;TCP分流示意图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/zhu327/zhu327.github.io/assets/873883/91c390ba-c1a6-42a2-b8de-3d3e38b74f83&#34; alt=&#34;Image2&#34; width=&#34;700px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当目标IP命中ipset vpn流量时，重定向到ipt2socks进行代理。直连的流量则直接通过系统出口。&lt;/p&gt;

&lt;p&gt;iptables配置示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建ipset
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;ipset create vpn hash:ip

iptables -t nat -N V2RAY &lt;span class=&#34;c1&#34;&gt;# 新建一个名为 V2RAY 的链
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;iptables -t nat -A V2RAY -p tcp -m &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; --match-set vpn dst -j REDIRECT --to-ports &lt;span class=&#34;m&#34;&gt;12345&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 命中ipset vpn的流量重定向到ipt2socks
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;iptables -t nat -A PREROUTING -p tcp -j V2RAY &lt;span class=&#34;c1&#34;&gt;# 对局域网其他设备进行透明代理
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;iptables -t nat -A OUTPUT -p tcp -j V2RAY # 对本机进行透明代理&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ipt2socks启动命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/usr/bin/ipt2socks -R -4 -j &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; -s &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.2.141 -p &lt;span class=&#34;m&#34;&gt;1080&lt;/span&gt; -l &lt;span class=&#34;m&#34;&gt;12345&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这一方案的具体实现通过OpenWRT的Passwall插件，使得配置变得非常便捷。尽管这个方案在日常使用中表现良好，但也存在3个主要问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;分流的DNS需要通过远端代理查询&lt;/strong&gt;，虽然我们利用DNS缓存来减轻影响，但仍可能影响首次响应速度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于一些走CDN的网站，是否将其IP加入ipset不太确定&lt;/strong&gt;，这可能导致一些网站无法正常访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ipset变大以后影响iptables匹配效率&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;3-fake-ip透明代理&#34;&gt;3. Fake IP透明代理&lt;/h3&gt;

&lt;p&gt;最近我了解到一种称为Fake IP的代理方案，将其应用到我的现有解决方案中，成功解决了旧方案存在的三个问题。新方案更为简洁高效，无需依赖SmartDNS和Passwall插件，直接手动搭建即可。&lt;/p&gt;

&lt;h4 id=&#34;dns查询示意图&#34;&gt;DNS查询示意图：&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/zhu327/zhu327.github.io/assets/873883/a9a68e6b-ca83-4397-9742-83732b7c07f7&#34; alt=&#34;Image3&#34; width=&#34;700px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在DNS查询中，Dnsmasq通过分流后，命中代理域名的查询会被引导至v2ray的Fake DNS上，该Fake DNS返回一个固定网段的Fake IP。不再需要设置ipset，方案更为简化。&lt;/p&gt;

&lt;h4 id=&#34;tcp流量示意图&#34;&gt;TCP流量示意图：&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/zhu327/zhu327.github.io/assets/873883/2c05cec4-741a-43dd-b709-3f77d5e9ce7e&#34; alt=&#34;Image4&#34; width=&#34;700px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在TCP流量方面，命中固定网段的iptables规则后，流量将被重定向至ipt2socks。ipt2socks将透明代理转换为Socks5代理，并将流量发送至v2ray。v2ray检测到目标IP为Fake IP后，填充成域名并发送至远端代理服务器，实现代理域名的解析。&lt;/p&gt;

&lt;h4 id=&#34;v2ray配置参考&#34;&gt;v2ray配置参考：&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;loglevel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;warning&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;fakedns&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;ipPool&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;198.18.0.0/15&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;poolSize&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;65535&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;dns&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;servers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;fakedns&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;queryStrategy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;USE_IP4&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;inbounds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5335&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;tag&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dns-in&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dokodemo-door&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;119.29.29.29&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;53&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;network&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;udp&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1080&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;socks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;auth&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;noauth&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;udp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;sniffing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;destOverride&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;fakedns&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;metadataOnly&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;outbounds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;vless&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;出口协议&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dns&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;tag&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dns-out&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;routing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;rules&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;inboundTag&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;dns-in&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;outboundTag&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dns-out&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;strategy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;rules&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;iptables规则示例&#34;&gt;iptables规则示例：&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;iptables -t nat -N V2RAY
iptables -t nat -A V2RAY -d &lt;span class=&#34;m&#34;&gt;198&lt;/span&gt;.18.0.0/15 -p tcp -j REDIRECT --to-ports &lt;span class=&#34;m&#34;&gt;12345&lt;/span&gt;
iptables -t nat -A PREROUTING -p tcp -j V2RAY
iptables -t nat -A OUTPUT -p tcp -j V2RAY&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这一新方案通过Fake IP的代理机制成功解决了旧方案存在的问题，更加简洁高效。其中，v2ray的配置和iptables规则的设置使得整个方案在实践中更为可行和稳定。&lt;/p&gt;

&lt;h3 id=&#34;4-总结&#34;&gt;4. 总结&lt;/h3&gt;

&lt;p&gt;通过实践与不断的尝试，我们成功实现了一套高效、简洁的透明代理方案，让家中网络更具灵活性和隐私保护。通过采用Fake IP透明代理，我们解决了旧方案中存在的DNS查询速度、CDN网站不确定性等问题。新方案无需依赖繁杂的插件，通过手动配置即可轻松搭建。&lt;/p&gt;

&lt;p&gt;这一方案的精髓在于利用v2ray的Fake DNS功能，将特定域名的DNS查询引导至Fake IP，进而实现透明代理。同时，通过iptables的规则设置，我们成功将流量重定向至代理，实现了透明代理的高效运作。这不仅提高了网络使用体验，同时也加强了网络隐私和安全。&lt;/p&gt;

&lt;p&gt;这篇文章详细介绍了家庭网络的拓扑结构、IPv4与IPv6的配置以及三个阶段的透明代理方案演进。通过本文的分享，希望读者在搭建自己的透明代理方案时能够有所借鉴，更好地定制适合自己需求的网络环境。网络技术的不断发展，也让我们对未来的网络体验充满期待。&lt;/p&gt;

&lt;p&gt;在科技的道路上，我们将不断追求创新，不断完善，让科技更好地服务于我们的生活。希望这篇文章对您有所启发，为您的网络探索之路提供一些有益的参考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>零成本使用OpenAI API</title>
      <link>https://zhu327.github.io/2023/12/20/%E9%9B%B6%E6%88%90%E6%9C%AC%E4%BD%BF%E7%94%A8openai-api/</link>
      <pubDate>Wed, 20 Dec 2023 15:25:52 &#43;0800</pubDate>
      
      <guid>https://zhu327.github.io/2023/12/20/%E9%9B%B6%E6%88%90%E6%9C%AC%E4%BD%BF%E7%94%A8openai-api/</guid>
      <description>&lt;h3 id=&#34;1-openai-chatgpt&#34;&gt;1. OpenAI ChatGPT&lt;/h3&gt;

&lt;p&gt;ChatGPT已经发布了一年有余，成为有史以来用户增长最快的互联网产品。如果到了2023年你还没有使用过ChatGPT，可能你已经远离了互联网的中心。ChatGPT的发布与更新深刻改变了我的工作方式。我学到了如何撰写高效的提示，发现了ChatGPT的最佳应用场景，并在GitHub上探索了最佳实践。&lt;/p&gt;

&lt;p&gt;一些影响我ChatGPT之旅的值得一提的资源包括&lt;a href=&#34;https://www.huxiu.com/article/2440157.html&#34;&gt;OpenAI官方指南：如何提高ChatGPT的输出质量&lt;/a&gt;，一篇关于&lt;a href=&#34;https://blog.wordbot.io/ai-artificial-intelligence/openai-gpt-3-top-22-trending-use-case-ideas-in-2022/&#34;&gt;2023年OpenAI GPT-3最热门应用案例的文章&lt;/a&gt;，以及GitHub上的&lt;a href=&#34;https://github.com/linexjlin/GPTs&#34;&gt;GPT提示列表&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在我的日常工作中，我利用ChatGPT做了很多事情：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;它成为我在编写代码过程中查找相关文档的首选工具，替代了传统搜索引擎的需求。&lt;/li&gt;
&lt;li&gt;它轻松帮助我进行中英文翻译，充分发挥了其语言处理能力。&lt;/li&gt;
&lt;li&gt;在数据分析中，它高效地协助我处理复杂的SQL查询。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;尽管我已经是一个长时间的用户，但我仍然保持在免费计划上，没有选择Plus，也没有使用OpenAI API。由于ChatGPT的充值的限制，我尚未探索基于OpenAI API构建的众多AI工具和插件。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-gemini-pro-api&#34;&gt;2. Gemini Pro API&lt;/h3&gt;

&lt;p&gt;Gemini Pro是最近由Google发布的大型语言模型，作为ChatGPT的竞争对手。尽管从各项研究来看，它的性能略逊于&lt;code&gt;gpt-3.5-turbo&lt;/code&gt;，但作为通用用途的语言模型已经足够出色。尤其值得一提的是，它提供了每分钟60次的免费API调用，使我们能够以零成本使用。&lt;/p&gt;

&lt;p&gt;参考资源：&lt;a href=&#34;https://arxiv.org/abs/2312.11444&#34;&gt;《Gemini的语言能力深度剖析》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;鉴于OpenAI API已经成为事实上大型模型API协议的标准，市面上许多AI工具和插件仅支持OpenAI API。然而，作为新兴竞品，Gemini Pro API尚未得到众多AI工具的支持。因此，我开发了Gemini-OpenAI-Proxy这个协议转换代理，以帮助各种AI工具能够使用Gemini Pro API。&lt;/p&gt;

&lt;p&gt;GitHub链接：&lt;a href=&#34;https://github.com/zhu327/gemini-openai-proxy&#34;&gt;Gemini-OpenAI-Proxy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个工具具备优秀的OpenAI API兼容性，只需在&lt;a href=&#34;https://ai.google.dev/&#34;&gt;Google AI平台&lt;/a&gt;上申请一个API KEY，就可以像使用OpenAI API一样轻松使用Gemini Pro API。&lt;/p&gt;

&lt;p&gt;作为一个服务端程序，我们需要将Gemini-OpenAI-Proxy部署在开放Gemini Pro API的国外服务器上。我推荐使用&lt;a href=&#34;https://fly.io/&#34;&gt;fly.io&lt;/a&gt;进行零成本部署到日本或新加坡，以便在中国大陆能够快速响应。&lt;/p&gt;

&lt;h3 id=&#34;3-ai工具&#34;&gt;3. AI工具&lt;/h3&gt;

&lt;p&gt;拥有独立的OpenAI API服务后，我开始在工作和生活中广泛使用各种AI工具。在工作中，我倚赖以下一些工具和插件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chatboxai.app/&#34;&gt;Chatbox&lt;/a&gt;：桌面聊天客户端，直接与AI对话，内置了多种场景和prompt。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/pal-ai-chat-client/id6447545085&#34;&gt;Pal&lt;/a&gt;：iOS聊天客户端，方便随时随地与AI沟通。我会让AI帮忙创作睡前故事，然后播放给我的宝宝听。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chromewebstore.google.com/detail/nnjcoododbeemlmmhbfmmkbneniepaog&#34;&gt;ChatGPT Summary Assistant&lt;/a&gt;：对于较长的文章，我首先使用文章总结助手进行摘要总结，然后再判断是否需要更深入的精读。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/openai-translator/ogjibjphoadhljaoicdnjnmgokohngcc&#34;&gt;OpenAI Translator&lt;/a&gt;：AI翻译工具，在阅读英文文章时尤其实用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些工具的使用让我的工作效率得到了提升，同时也为生活增添了一些趣味。特别是在使用AI翻译工具时，它在阅读英文文章时发挥了巨大的帮助作用。&lt;/p&gt;

&lt;h3 id=&#34;4-总结&#34;&gt;4. 总结&lt;/h3&gt;

&lt;p&gt;总的来说，以ChatGPT为代表的大型语言模型已经深刻地改变了我们的工作和生活方式，同时也对整个世界产生了深远的影响。这些先进的AI工具不仅提高了工作效率，还为创造性和创新性的任务提供了新的可能性。随着技术的不断进步，我们可以期待这些语言模型继续发挥更大的作用，推动着人工智能在各个领域的进一步发展。在这个语言驱动的时代，ChatGPT等大型语言模型正在引领着我们走向更加智能化、创新化的未来。&lt;/p&gt;

&lt;p&gt;注: 这篇文章使用&lt;code&gt;gpt-3.5-turbo&lt;/code&gt;模型进行润色!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RSS文艺复兴</title>
      <link>https://zhu327.github.io/2023/12/15/rss%E6%96%87%E8%89%BA%E5%A4%8D%E5%85%B4/</link>
      <pubDate>Fri, 15 Dec 2023 14:32:52 &#43;0800</pubDate>
      
      <guid>https://zhu327.github.io/2023/12/15/rss%E6%96%87%E8%89%BA%E5%A4%8D%E5%85%B4/</guid>
      <description>&lt;h3 id=&#34;1-rss是什么&#34;&gt;1. RSS是什么&lt;/h3&gt;

&lt;p&gt;RSS（Really Simple Syndication）是一种用于发布经常更新的工作的XML格式的文件的标准。这些文件通常包含新闻摘要、文章标题、链接和发布日期等信息。RSS提供了一种订阅机制，使用户能够轻松地跟踪他们关注的多个网站的最新更新，而无需定期访问这些网站。&lt;/p&gt;

&lt;p&gt;尽管RSS在其创立初期非常受欢迎，但它逐渐失去了流行度。一些原因包括：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;社交媒体的兴起：&lt;/strong&gt; 随着社交媒体平台的发展，用户开始转向使用平台内的订阅和分享功能来获取和分享信息。社交媒体提供了更直观和交互性的方式来发现和分享内容。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;个性化推荐算法：&lt;/strong&gt; 许多网站和应用采用了个性化推荐算法，通过分析用户的行为和兴趣，推荐相关内容。这减少了用户需要手动订阅和管理的需求。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;信息过载：&lt;/strong&gt; 随着互联网上可用信息的不断增长，用户面临信息过载的问题。RSS的线性列表形式可能无法有效地处理大量信息，而个性化推荐算法能够更好地适应用户需求。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;移动应用的普及：&lt;/strong&gt; 移动应用的兴起使用户更倾向于使用专门的应用程序，而不是传统的RSS阅读器。这些应用通常提供更好的用户体验和功能。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;网站设计的变化：&lt;/strong&gt; 许多现代网站设计更加动态和交互式，而不仅仅是提供简单的文章列表。这样的设计可能使得传统的RSS阅读方式显得过时。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;需要注意的是，虽然RSS在一些领域可能不再是主流，但它仍然是一种强大的工具，特别是对于那些喜欢通过订阅方式跟踪特定网站更新的用户。一些应用和服务仍然提供对RSS的支持。流行度的变化可能因用户群体和使用场景而异。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-为什么我会重启rss&#34;&gt;2. 为什么我会重启RSS&lt;/h3&gt;

&lt;p&gt;自从Google Reader关闭以来，我就放弃了使用RSS相关的应用。那时我开始关注知乎，早期的知乎回答质量还相当不错，而且没有推荐系统的干扰。过了一段时间，我接触到了即刻，这是一个非常出色的信息订阅工具，尤其是其机器人订阅功能，我甚至在即刻上创建了一些自定义机器人。然而，随着即刻的封禁，我一直未能找到类似的替代平台。&lt;/p&gt;

&lt;p&gt;随着时间推移，我对知乎的推荐系统感到不满，它似乎越来越无法满足我的兴趣点。同时，我对机器推荐可能导致信息茧房效应的抵触也逐渐增强。因此，我开始考虑重新拾起RSS，重新探索这种传统的信息获取方式。重新回归RSS，我期望能够更自主地管理我所关注的内容，摆脱推荐算法的限制，以更自由和个性化的方式获取信息。&lt;/p&gt;

&lt;p&gt;尽管RSS在一段时间内逐渐式微，但一些新的开源项目让我重新关注了这一技术。首先是 &lt;a href=&#34;https://github.com/DIYgod/RSSHub&#34;&gt;RSSHub&lt;/a&gt;，这是一个强大的RSS转换代理工具，可以将各种网站的信息转换成RSS格式，便于订阅。更令人兴奋的是，它提供了一个强大而易用的RSS开发框架，使懂编程的用户甚至可以轻松地创建自己的RSS订阅源。&lt;/p&gt;

&lt;p&gt;其次是 &lt;a href=&#34;https://github.com/miniflux/v2&#34;&gt;Miniflux&lt;/a&gt;，这是一个专注于RSS源订阅的工具。它定时从订阅源获取数据，并通过Google Reader API将数据提供给RSS阅读器。除了基本的订阅功能外，Miniflux还支持自定义文章全文爬取，解决了一些RSS源无法提供全文阅读的问题。&lt;/p&gt;

&lt;p&gt;这些开源项目为重新探索RSS提供了新的可能性，使得我们可以更加灵活和个性化地管理和获取我们关注的信息。虽然RSS在一度被边缘化，但这些项目的出现为其注入了新的活力。&lt;/p&gt;

&lt;h3 id=&#34;3-部署rsshub与miniflux&#34;&gt;3. 部署RSSHub与Miniflux&lt;/h3&gt;

&lt;h4 id=&#34;rsshub&#34;&gt;RSSHub&lt;/h4&gt;

&lt;p&gt;在&lt;a href=&#34;https://vercel.com&#34;&gt;Vercel&lt;/a&gt;上部署RSSHub是相对简单的任务，有许多相关的教程可供参考，这里不再详细赘述。你可以查阅这篇博客文章作为参考: &lt;a href=&#34;https://www.cnblogs.com/QiuSYan/p/RssHub.html&#34;&gt;《在Vercel上部署RSSHub》&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&#34;miniflux&#34;&gt;Miniflux&lt;/h4&gt;

&lt;p&gt;相比之下，部署Miniflux稍微复杂一些，因为它依赖于Postgres数据库。推荐使用&lt;a href=&#34;https://supabase.com&#34;&gt;Supabase&lt;/a&gt;提供的Postgres数据库，它提供了最大500MB的免费数据库，足够我们正常使用。你可以参考这篇文章来创建Supabase数据库: &lt;a href=&#34;https://blog.cysi.me/2022/05/build-miniflux-rss-on-railway.html&#34;&gt;《在Railway上搭建Miniflux RSS阅读器》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Miniflux推荐部署在&lt;a href=&#34;https://fly.io&#34;&gt;fly.io&lt;/a&gt;，这是一个提供免费额度的应用部署平台。具体部署步骤可以参考官方文档。以下是一个示例的&lt;code&gt;fly.toml&lt;/code&gt;文件供参考：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;your_app_name&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;primary_region&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sea&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;kill_signal&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;SIGINT&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;kill_timeout&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;5s&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;experimental&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;auto_rollback&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;miniflux/miniflux:latest&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;BASE_URL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://your_app_name.fly.dev&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;CLEANUP_ARCHIVE_READ_DAYS&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;15&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;CLEANUP_ARCHIVE_UNREAD_DAYS&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;30&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;DATABASE_URL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;your_supabase_postgres_url&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;HTTPS&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;POLLING_FREQUENCY&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;30&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;POLLING_PARSING_ERROR_LIMIT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;POLLING_SCHEDULER&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;entry_frequency&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;PORT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;8080&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;RUN_MIGRATIONS&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;SCHEDULER_ENTRY_FREQUENCY_MAX_INTERVAL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;60&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c&#34;&gt;# 以下配置在初次部署时填写, 第二次部署时需要删除&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;CREATE_ADMIN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;ADMIN_PASSWORD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;your_admin_password&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;protocol&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;internal_port&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;processes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

  &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

  &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;443&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tls&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;concurrency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;connections&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;hard_limit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;soft_limit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;

  &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tcp_checks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;interval&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;15s&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2s&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;grace_period&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1s&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此，我们零成本拥有了自己的RSS订阅平台。Miniflux本身非常适合在浏览器上访问，在手机端推荐使用&lt;a href=&#34;https://apps.apple.com/us/app/reeder-5/id1529445840&#34;&gt;Reedr&lt;/a&gt;，提供了完美的阅读体验。&lt;/p&gt;

&lt;h3 id=&#34;4-我的订阅源分享&#34;&gt;4. 我的订阅源分享&lt;/h3&gt;

&lt;p&gt;我的订阅源大致可分为几个主要类别：新闻、日报、深度阅读、科技和娱乐。这些分类涵盖了中外各种媒体的新闻报道、每日热点事件、高质量文章、科技趋势和娱乐评论。&lt;/p&gt;

&lt;h4 id=&#34;新闻&#34;&gt;新闻&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;华尔街日报&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;美国主流叙事媒体&lt;/li&gt;
&lt;li&gt;数据来源: &lt;a href=&#34;https://agora0.gitlab.io/news/wsj/&#34;&gt;零新闻&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RSSHub路由: &lt;code&gt;/agora0/wsj&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在Miniflux设置抓取全文，抓取规则 &lt;code&gt;div.post-content&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;推荐fork我的 &lt;a href=&#34;https://github.com/zhu327/rsshub&#34;&gt;RSSHub&lt;/a&gt; 以支持该路由&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;联合早报&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;新加坡相对中立媒体&lt;/li&gt;
&lt;li&gt;RSSHub路由: &lt;code&gt;/zaobao/znews/china&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;竹新社&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;24小时提供中外媒体中国新闻，相对中立&lt;/li&gt;
&lt;li&gt;RSSHub路由: &lt;code&gt;/telegram/channel/tnews365&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;抽屉新热榜&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;国内热点事件，相对符合我的兴趣点&lt;/li&gt;
&lt;li&gt;RSSHub路由: &lt;code&gt;/chouti/hot&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;日报&#34;&gt;日报&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;即刻资讯台&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;每天早上发布前一点的热点新闻和即刻热文&lt;/li&gt;
&lt;li&gt;RSSHub路由: &lt;code&gt;/jike/user/wenhao1996&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;推荐fork我的 &lt;a href=&#34;https://github.com/zhu327/rsshub&#34;&gt;RSSHub&lt;/a&gt; 以获取更完整的数据&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;喷嚏图卦&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;每天下午发布当天的国内热点事件&lt;/li&gt;
&lt;li&gt;RSSHub路由: &lt;code&gt;/dapenti/tugua&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;推荐fork我的 &lt;a href=&#34;https://github.com/zhu327/rsshub&#34;&gt;RSSHub&lt;/a&gt; 以获取更及时的数据&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;iDaily 每日环球视野&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;每天傍晚发布当天环球热点新闻图&lt;/li&gt;
&lt;li&gt;RSSHub路由: &lt;code&gt;/jike/user/wenhao1996&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;推荐fork我的 &lt;a href=&#34;https://github.com/zhu327/rsshub&#34;&gt;RSSHub&lt;/a&gt; 以获取更美观的排版&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;虎嗅网热榜&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;虎扑每日热门文章&lt;/li&gt;
&lt;li&gt;RSSHub路由: &lt;code&gt;/huxiu/tophub?limit=10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;推荐fork我的 &lt;a href=&#34;https://github.com/zhu327/rsshub&#34;&gt;RSSHub&lt;/a&gt; 以支持该路由&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;晚点LatePost&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;深度科技报道&lt;/li&gt;
&lt;li&gt;RSSHub路由: &lt;code&gt;/latepost&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;腾讯新闻深网&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;深度科技报道&lt;/li&gt;
&lt;li&gt;RSSHub路由: &lt;code&gt;/tencent/news/author/5157372&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;互联网怪盗团&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;深度科技报道&lt;/li&gt;
&lt;li&gt;RSSHub路由: &lt;code&gt;/tencent/news/author/16802833&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;科技&#34;&gt;科技&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hack News&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hnrss.github.io&#34;&gt;Hack News RSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用 &lt;a href=&#34;https://www.rsstranslator.com&#34;&gt;RSSTranslator&lt;/a&gt; 工具将标题翻译为中文，最终订阅地址: &lt;a href=&#34;https://rsstranslator.com/rss/6531a79e107aa592d8fa&#34;&gt;Hack News 中文翻译&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;娱乐&#34;&gt;娱乐&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;豆瓣最受欢迎的书评&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.douban.com/feed/review/book&#34;&gt;豆瓣最受欢迎的书评&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在Miniflux设置中覆盖默认的用户代理，并抓取全文，抓取规则 &lt;code&gt;div.main-bd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;豆瓣最受欢迎的影评&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.douban.com/feed/review/movie&#34;&gt;豆瓣最受欢迎的影评&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在Miniflux设置中覆盖默认的用户代理，并抓取全文，抓取规则 &lt;code&gt;div.main-bd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通过这些订阅源，我能够获得来自各个领域的精选内容，确保我的信息获取更加多元化和个性化。如果你对其中任何一个订阅感兴趣，可以根据提供的路由或链接添加到你的RSS阅读器中。&lt;/p&gt;

&lt;h3 id=&#34;5-总结&#34;&gt;5. 总结&lt;/h3&gt;

&lt;p&gt;RSS是一种用于发布经常更新的工作的XML格式的文件的标准，它提供了一种订阅机制，使用户能够轻松地跟踪他们关注的多个网站的最新更新。近年来，随着社交媒体的兴起和个性化推荐算法的发展，RSS逐渐失去了流行度。然而，一些新的开源项目为RSS注入了新的活力，使其又重新受到关注。&lt;/p&gt;

&lt;p&gt;本文介绍了RSSHub和Miniflux这两个开源项目，并提供了它们的部署步骤和我的订阅源分享。希望这篇文章能够帮助读者重新了解RSS，并找到适合自己的RSS阅读方式。&lt;/p&gt;

&lt;p&gt;注: 这基本上就是一篇由ChatGPT帮忙写的文章!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用pyproject.toml保证代码质量</title>
      <link>https://zhu327.github.io/2023/01/09/%E4%BD%BF%E7%94%A8pyproject.toml%E4%BF%9D%E8%AF%81%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/</link>
      <pubDate>Mon, 09 Jan 2023 15:53:52 &#43;0800</pubDate>
      
      <guid>https://zhu327.github.io/2023/01/09/%E4%BD%BF%E7%94%A8pyproject.toml%E4%BF%9D%E8%AF%81%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/</guid>
      <description>&lt;h3 id=&#34;1-pyproject-toml是什么&#34;&gt;1. pyproject.toml是什么&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://python.freelycode.com/contribution/detail/1910&#34;&gt;https://python.freelycode.com/contribution/detail/1910&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在使用&lt;code&gt;pyproject.toml&lt;/code&gt;前, 我们的Python项目根目录下会存在很多项目相关的配置文件, 比如:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;requirements.txt&lt;/li&gt;
&lt;li&gt;requirements_dev.txt&lt;/li&gt;
&lt;li&gt;.flake8&lt;/li&gt;
&lt;li&gt;mypy.ini&lt;/li&gt;
&lt;li&gt;.isort.cfg&lt;/li&gt;
&lt;li&gt;.bandit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们的项目代码中充斥这这些与代码无关的配置, &lt;code&gt;pyproject.toml&lt;/code&gt;就是用来统一纳管Python项目的所有这些配置的东西, 得到了以上大部分工具的支持.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-poetry&#34;&gt;2. poetry&lt;/h3&gt;

&lt;p&gt;pip还不支持&lt;code&gt;pyproject.toml&lt;/code&gt;, 所有我们需要使用poetry这个工具来实现项目的依赖管理.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://python-poetry.org/docs/basic-usage/&#34;&gt;https://python-poetry.org/docs/basic-usage/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如文档所示, 我们只需要执行:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;poetry init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就会在项目的根目录下自动生成一个&lt;code&gt;pyproject.toml&lt;/code&gt;, 通过poetry添加的依赖项会自动写入&lt;code&gt;pyproject.toml&lt;/code&gt;, 一般情况下, 项目下的&lt;code&gt;requirements.txt&lt;/code&gt;, &lt;code&gt;requirements_dev.txt&lt;/code&gt;就可以删除了.&lt;/p&gt;

&lt;h3 id=&#34;3-format&#34;&gt;3. Format&lt;/h3&gt;

&lt;p&gt;写完代码后, 我们希望不同项目成员提交的代码都能有统一个代码格式规范, 所用我们使用以下工具来保证代码风格的一致:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;black 用于格式化代码&lt;/li&gt;
&lt;li&gt;isort 用于对Python import代码行自动排序&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安装:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;poetry add black --dev
poetry add isort --dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# FILE: pyproject.toml

[tool.black]
line-length = 119
target-version = [&#39;py36&#39;]
exclude = &#39;&#39;&#39;
(
  /(
      \.mypy_cache
    | \.git
    | migrations
  )/
)
&#39;&#39;&#39;

[tool.isort]
multi_line_output = 3
include_trailing_comma = &#39;true&#39;
force_grid_wrap = 0
use_parentheses = &#39;true&#39;
line_length = 119
skip = [&amp;quot;.mypy_cache&amp;quot;, &amp;quot;.git&amp;quot;, &amp;quot;*/migrations&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;isort --settings-path&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./pyproject.toml .
black --config&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./pyproject.toml .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;4-lint&#34;&gt;4. Lint&lt;/h3&gt;

&lt;p&gt;代码静态检查是保证项目代码质量必不可的步骤, 一些现代的静态检查工具, 能够在我们的代码被提交之前就能检查出代码缺陷, 以下是一些建议:&lt;/p&gt;

&lt;h4 id=&#34;4-1-flake8&#34;&gt;4.1 flake8&lt;/h4&gt;

&lt;p&gt;除了flake8本身支持的检查规则以外, flake8还支持插件来扩展规则, 这里推荐安装&lt;code&gt;flake8-bugbear&lt;/code&gt;, 以下是使用参考:&lt;/p&gt;

&lt;p&gt;安装:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;poetry add flake8 --dev
poetry add flake8-bugbear --dev
poetry add pyproject-flake8 --dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# FILE: pyproject.toml

[tool.flake8]
ignore = &amp;quot;C901,E203,W503,B010,B009&amp;quot;
max-line-length=119
max-complexity=12
format = &amp;quot;pylint&amp;quot;
show_source = &amp;quot;true&amp;quot;
statistics = &amp;quot;true&amp;quot;
count = &amp;quot;true&amp;quot;
exclude = &amp;quot;*migrations*,*.pyc,.git,__pycache__,node_modules/*,*/templates_module*,*/bin/*,*/settings/*,config,tests/unittest_settings.py&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pflake8 --config&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./pyproject.toml .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;4-2-mypy&#34;&gt;4.2 mypy&lt;/h4&gt;

&lt;p&gt;随着python3支持type hitting, Python代码的可读性与编辑器支持都得到了大幅提升, 所以建议在项目中强制使用type hitting, mypy用于对代码中类型标注做检查, 以下为参考配置:&lt;/p&gt;

&lt;p&gt;安装:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;poetry add mypy --dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# FILE: pyproject.toml

[tool.mypy]
files=[&amp;quot;.&amp;quot;]
python_version = 3.6
ignore_missing_imports=true
follow_imports=&amp;quot;skip&amp;quot;
strict_optional=true
pretty=true
show_error_codes=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mypy --config-file&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./pyproject.toml .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;4-3-bandit&#34;&gt;4.3 bandit&lt;/h4&gt;

&lt;p&gt;bandit用于检查Python代码中可能出现的安全问题, 但是检查耗时比较长, 推荐在CI工具中使用&lt;/p&gt;

&lt;p&gt;安装:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;poetry add bandit --dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# FILE: pyproject.toml

[tool.bandit]
exclude_dirs = [&amp;quot;tests&amp;quot;]
tests = []
skips = [&amp;quot;B101&amp;quot;, &amp;quot;B110&amp;quot;, &amp;quot;B311&amp;quot;, &amp;quot;B303&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;bandit -c ./pyproject.toml -r .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;5-unittest&#34;&gt;5. unittest&lt;/h3&gt;

&lt;p&gt;单元测试是保证代码质量的重要步骤, 在每次提交代码前运行单元测试是一个好的习惯, 现代的Python项目推荐使用pytest框架实现单元测试&lt;/p&gt;

&lt;p&gt;安装:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;poetry add pytest --dev
poetry add pytest-cov --dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# FILE: pyproject.toml

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = &amp;quot;tests.unittest_settings&amp;quot;
addopts = &amp;quot;--disable-pytest-warnings --reuse-db --nomigrations -s&amp;quot;
python_files = &amp;quot;*_tests.py&amp;quot;
testpaths = [
    &amp;quot;tests&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pytest -c ./pyproject.toml .

&lt;span class=&#34;c1&#34;&gt;# 生成代码测试覆盖率报告
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;pytest --cov-report html --cov&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;backend -c ./pyproject.toml .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;6-自动化&#34;&gt;6. 自动化&lt;/h3&gt;

&lt;p&gt;我们希望以上&lt;code&gt;Format&lt;/code&gt;, &lt;code&gt;Lint&lt;/code&gt;, &lt;code&gt;Test&lt;/code&gt;在每次代码提交时都能自动执行, 而不是每次手动去跑, 所以我们在git提交前使用pre-commit触发以上环节, 在代码在Github上被合并前使用github actions触发以上环节&lt;/p&gt;

&lt;h4 id=&#34;6-1-pre-commit&#34;&gt;6.1 pre-commit&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://pre-commit.com/&#34;&gt;https://pre-commit.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;推荐配置&lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# See https://pre-pre-commit --versioncommit.com for more information&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# See https://pre-commit.com/hooks.html for more hooks&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;repos&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;repo&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;https&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;//github.com/pre-commit/pre-commit-hooks&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;rev&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;v2.&lt;span class=&#34;m&#34;&gt;3.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;hooks&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;check-added-large-files&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;check-ast&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;check-byte-order-marker&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;check-case-conflict&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;check-executables-have-shebangs&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;check-merge-conflict&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;debug-statements&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;detect-private-key&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;end-of-file-fixer&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;trailing-whitespace&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;repo&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;local&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;hooks&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;isort&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;isort&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;language&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;python&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;pass_filenames&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;entry&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;isort&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--settings-path=saas/pyproject.toml&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;black&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;black&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;language&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;python&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;pass_filenames&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;entry&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;black&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--config=saas/pyproject.toml&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;flake8&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;flak8&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;language&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;python&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;pass_filenames&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;entry&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;pflake8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--config=saas/pyproject.toml&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mypy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mypy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;language&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;python&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;pass_filenames&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;entry&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mypy&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--config-file=saas/pyproject.toml&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;id&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;pytest&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;pytest&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;language&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;python&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;pass_filenames&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;entry&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;pytest&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;saas/pyproject.toml&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;6-2-github-actions&#34;&gt;6.2 github actions&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;.github/workflows/python.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Python&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;CI&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Check&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;on&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;push&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;branches&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;master&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;develop&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;pull_request&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;branches&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;master&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;develop&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;jobs&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;build&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;strategy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;fail-fast&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;matrix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;python-version&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;poetry-version&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.1&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;os&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;ubuntu-&lt;span class=&#34;m&#34;&gt;18.04&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;runs-on&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;${{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;matrix.os&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;steps&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;uses&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;actions/checkout@v2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Set&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;up&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Python&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;uses&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;actions/setup-python@v2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;with&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;python-version&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;${{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;matrix.python-version&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;uses&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;snok/install-poetry@v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;with&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;version&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.1&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Install&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;dependencies&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;poetry&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;install&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--no-interaction&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Lint&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;with&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;flake8&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;pflake8&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--config=saas/pyproject.toml&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Lint&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;with&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;bandit&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;bandit&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;saas/pyproject.toml&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-r&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Lint&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;with&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mypy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;mypy&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--config-file=saas/pyproject.toml&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Test&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;with&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;pytest&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;pytest&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-c&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;saas/pyproject.toml&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;7-makefile&#34;&gt;7. Makefile&lt;/h3&gt;

&lt;p&gt;有了以上这些配置后, 对于一个项目新人, 可能上手成本有点高, 这个时候用&lt;code&gt;make&lt;/code&gt;命令就能帮助新同学快速熟悉项目&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;i18n_all: i18n_po i18n_mo

# make messages of python file and django template file to django.po
i18n_po:
	python manage.py makemessages -d django -l en -e html,part -e py
	python manage.py makemessages -d django -l zh_Hans -e html,part -e py

# compile django.po and djangojs.po to django.mo and djangojs.mo
i18n_mo:
	python manage.py compilemessages

init:
	pip install -U pip setuptools
	pip install poetry
	poetry install
	pip install pre-commit
	pre-commit install

lint:
	pflake8 --config=./pyproject.toml .
	bandit -c ./pyproject.toml -r .
	mypy --config-file=./pyproject.toml .

fmt:
	isort --settings-path=./pyproject.toml .
	black --config=./pyproject.toml .

test:
	pytest -c ./pyproject.toml .

cov:
	pytest --cov-report html --cov=backend -c ./pyproject.toml .

serve:
	python manage.py runserver 8000
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;8-参考&#34;&gt;8. 参考&lt;/h3&gt;

&lt;p&gt;以上项目配置来源于&lt;a href=&#34;https://github.com/TencentBlueKing/bk-iam-saas&#34;&gt;蓝鲸权限中心&lt;/a&gt;, 参考了以下文章:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.b-list.org/weblog/2022/dec/19/boring-python-code-quality/&#34;&gt;https://www.b-list.org/weblog/2022/dec/19/boring-python-code-quality/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>编程语言漫谈</title>
      <link>https://zhu327.github.io/2022/03/30/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%BC%AB%E8%B0%88/</link>
      <pubDate>Wed, 30 Mar 2022 17:38:04 &#43;0800</pubDate>
      
      <guid>https://zhu327.github.io/2022/03/30/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%BC%AB%E8%B0%88/</guid>
      <description>&lt;p&gt;半年前还是2021年春节的时候, 在家休假的我, 在B站上发现了一门叫&lt;a href=&#34;https://www.bilibili.com/video/BV1hp4y1k7SV&#34;&gt;RUST语言的课程&lt;/a&gt;, 学习的过程中, 发现RUST语言为了绝对的安全性, 在语法本身上做了很多的妥协, 所以想着等我学完这门课, 再基于自己以往编程语言的学习经历, 写一篇&amp;lt;如何学习一门新的编程语言&amp;gt;的文章. 但是时过境迁, 我并没有学完这门RUST课, 所以&amp;lt;如何学习一门新的编程语言&amp;gt;也就无疾而终了. 回过头来再思考下以往我学习的那些编程语言, 就有了这篇文章&amp;lt;编程语言漫谈&amp;gt;. 我希望以一种比较轻松的散文的形式来阐述我过完学习的一些经验与思考.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/873883/160806614-07709f0a-add6-464b-a76a-bbaffdeab727.jpg&#34; alt=&#34;rust&#34; width=&#34;720px&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-程序是如何运行的&#34;&gt;1. 程序是如何运行的&lt;/h3&gt;

&lt;p&gt;关于程序是如何运行的是一个很大的话题, 我个人认为最好的教材是这本&lt;a href=&#34;https://book.douban.com/subject/26912767/&#34;&gt;深入理解计算机系统&lt;/a&gt;, 值得每个程序员深入的阅读, 这里我就不再对这本书的内容做详细的总结, 只提2个点, CPU与内存.&lt;/p&gt;

&lt;h4 id=&#34;cpu&#34;&gt;CPU&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://pic2.zhimg.com/v2-8b5b6ff186ebb7deef6905aa71c48261_r.jpg&#34; alt=&#34;preview&#34; /&gt;&lt;/p&gt;

&lt;p&gt;说到CPU就绕不过冯诺依曼结构, 在这个体系中, CPU就是一个非常傻的元器件, 它只做3件事:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;获取输入指令&lt;/li&gt;
&lt;li&gt;执行指令&lt;/li&gt;
&lt;li&gt;输出结果&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后循环做以上三件事, 只要不断电, 永不停歇.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://static001.geekbang.org/infoq/f5/f51fe88175b096a4cb3cbf6bd233fac3.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1．取指令阶段&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;取指令（Instruction Fetch，IF）阶段是将一条指令从主存中取到指令寄存器的过程。&lt;/p&gt;

&lt;p&gt;程序计数器PC中的数值，用来指示当前指令在主存中的位置。当一条指令被取出后，PC中的数值将根据指令字长度而自动递增。若为单字长指令，则(PC)+1PC，若为双字长指令，则(PC)+2PC，依此类推。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2．指令译码阶段&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;取出指令后，计算机立即进入指令译码（Instruction Decode，ID）阶段。&lt;/p&gt;

&lt;p&gt;在指令译码阶段，指令译码器按照预定的指令格式，对取回的指令进行拆分和解释，识别和区分出不同的指令类别及各种获取操作数的方法。&lt;/p&gt;

&lt;p&gt;在组合逻辑控制的计算机中，指令译码器对不同的指令操作码产生不同的控制电位，以形成不同的微操作序列；在微程序控制的计算机中，指令译码器用指令操作码找到执行该指令的微程序的入口，并从此入口开始执行。&lt;/p&gt;

&lt;p&gt;在传统的设计里，CPU中负责指令译码的部分是无法改变的硬件。不过，在众多运用微程序控制技术的新型CPU中，微程序有时是可重写的，可以通过修改成品CPU来改变CPU的译码方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3．执行指令阶段&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在取指令和指令译码阶段之后，接着进入执行指令（Execute，EX）阶段。&lt;/p&gt;

&lt;p&gt;此阶段的任务是完成指令所规定的各种操作，具体实现指令的功能。为此，CPU的不同部分被连接起来，以执行所需的操作。&lt;/p&gt;

&lt;p&gt;例如，如果要求完成一个加法运算，算术逻辑单元（ALU）将被连接到一组输入和一组输出，输入端提供需要相加的数值，而输出端将含有最后的运算结果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4．访存取数阶段&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;根据指令需要，有可能要访问主存，读取操作数，这样就进入了访存取数（Memory，MEM）阶段。&lt;/p&gt;

&lt;p&gt;此阶段的任务是：根据指令地址码，得到操作数在主存中的地址，并从主存中读取该操作数用于运算。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5．结果写回阶段&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;作为最后一个阶段，结果写回（Writeback，WB）阶段把执行指令阶段的运行结果数据“写回”到某种存储形式。结果数据经常被写到CPU的内部寄存器中，以便被后续的指令快速地存取。在有些情况下，结果数据也可被写入相对较慢、但较廉价且容量较大的主存。许多指令还会改变程序状态字寄存器中标志位的状态，这些标志位标识着不同的操作结果，可被用来影响程序的动作。&lt;/p&gt;

&lt;p&gt;在指令执行完毕、结果数据写回之后，若无意外事件（如结果溢出等）发生，计算机就接着从程序计数器PC中取得下一条指令地址，开始新一轮的循环，下一个指令周期将正常地顺序取出下一条指令。&lt;/p&gt;

&lt;p&gt;许多新型CPU可以同时取出、译码和执行多条指令，体现出并行处理的特性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上内容引用至&lt;a href=&#34;[CPU的工作过程 (intel.com)](https://software.intel.com/content/www/cn/zh/develop/articles/book-processor-architecture_cpu_work_process.html)&#34;&gt;CPU的工作过程&lt;/a&gt;, 虽然有5个阶段, 但是仔细看现代CPU还是脱离不了冯诺依曼体系结构, 仍然是在循环着取指令, 执行指令, 输出结果的过程.&lt;/p&gt;

&lt;h4 id=&#34;内存&#34;&gt;内存&lt;/h4&gt;

&lt;p&gt;从以上CPU结构, 我们可以看出无论是取指令还是输出结果, CPU都依赖于总线与外部存储, 也就是内存做交互. 那么程序是如何使用内存的呢, 这里以Linux的程序内存布局为例来说明.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/873883/160808304-cffa5cad-f5d9-443d-9a52-eb565c25c3dd.png&#34; alt=&#34;memory&#34; width=&#34;720px&#34;&gt;&lt;/p&gt;

&lt;p&gt;在Linux系统中, 每个程序在运行时, 都会由操作系统将自己的可执行二进制文件载入到内存中, 通过虚拟内存地址空间, 每个程序看到的自己的内存高地址与低地址都是一样的, 其中用于运行函数本地变量的地址空间叫栈, 而需要程序自行管理内存的空间叫堆. 每个函数运行时都会在栈上创建一块栈帧, 函数返回时pop出栈帧, 空间被回收. 在堆上的内存分配则需要手动管理, 程序自行申请空间, 回收空间.&lt;/p&gt;

&lt;h4 id=&#34;汇编&#34;&gt;汇编&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;汇编语言&lt;/strong&gt;（英语：&lt;strong&gt;assembly language&lt;/strong&gt;）[&lt;a href=&#34;https://zh.wikipedia.org/wiki/汇编语言#cite_note-1&#34;&gt;注 1]&lt;/a&gt;[&lt;a href=&#34;https://zh.wikipedia.org/wiki/汇编语言#cite_note-2&#34;&gt;1]&lt;/a&gt;是任何一种用于&lt;a href=&#34;https://zh.wikipedia.org/wiki/电子计算机&#34;&gt;电子计算机&lt;/a&gt;、&lt;a href=&#34;https://zh.wikipedia.org/wiki/微处理器&#34;&gt;微处理器&lt;/a&gt;、&lt;a href=&#34;https://zh.wikipedia.org/wiki/微控制器&#34;&gt;微控制器&lt;/a&gt;，或其他可编程器件的&lt;a href=&#34;https://zh.wikipedia.org/wiki/低级语言&#34;&gt;低级语言&lt;/a&gt;。在不同的设备中，汇编语言对应着不同的&lt;a href=&#34;https://zh.wikipedia.org/wiki/机器语言&#34;&gt;机器语言&lt;/a&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/指令集架構&#34;&gt;指令集&lt;/a&gt;。一种汇编语言专用于某种&lt;a href=&#34;https://zh.wikipedia.org/wiki/计算机系统结构&#34;&gt;计算机系统结构&lt;/a&gt;，而不像许多&lt;a href=&#34;https://zh.wikipedia.org/wiki/高级语言&#34;&gt;高级语言&lt;/a&gt;，可以在不同系统平台之间移植。&lt;/p&gt;

&lt;p&gt;使用汇编语言编写的源代码，然后通过相应的汇编程序将它们转换成可执行的机器代码。这一过程被称为&lt;strong&gt;汇编过程&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;汇编语言使用助记符（Mnemonics）来代替和表示特定低级机器语言的操作。特定的汇编目标指令集可能会包括特定的操作数。许多汇编程序可以识别代表地址和常量的标签（Label）和符号（Symbols），这样就可以用字符来代表操作数而无需采取&lt;a href=&#34;https://zh.wikipedia.org/wiki/寫死&#34;&gt;写死&lt;/a&gt;的方式。普遍地说，每一种特定的汇编语言和其特定的机器语言指令集是一一对应的。&lt;/p&gt;

&lt;p&gt;许多汇编程序为程序开发、汇编控制、辅助&lt;a href=&#34;https://zh.wikipedia.org/wiki/调试工具&#34;&gt;调试&lt;/a&gt;提供了额外的支持机制。有的汇编语言编写工具经常会提供&lt;a href=&#34;https://zh.wikipedia.org/wiki/巨集&#34;&gt;宏&lt;/a&gt;，它们也被称为宏汇编器。&lt;/p&gt;

&lt;p&gt;现在汇编语言已不像其他大多数的程序设计语言一样被广泛用于&lt;a href=&#34;https://zh.wikipedia.org/wiki/程序設計&#34;&gt;程序设计&lt;/a&gt;，在今天的实际应用中，它通常被应用在底层硬件操作和高要求的程序优化的场合。&lt;a href=&#34;https://zh.wikipedia.org/wiki/驅動程序&#34;&gt;驱动程序&lt;/a&gt;、嵌入式&lt;a href=&#34;https://zh.wikipedia.org/wiki/操作系统&#34;&gt;操作系统&lt;/a&gt;和实时运行程序中都会需要汇编语言。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上是维基百科对于汇编的解释, 简单的理解汇编就是对于特定的硬件的指令的一种符号表示, 每个汇编指令与二进制的CPU指令机器码是一一对应的, 是为了避免让程序员直接写二进制程序被发明出来的一种便捷方式. 从汇编语言转换成可执行的二进制文件需要执行汇编过程.&lt;/p&gt;

&lt;p&gt;直接写汇编也不方便, 需要程序员了解整个CPU的结构, 了解所有CPU提供的指令, 了解每个寄存器的作用, 了解内存中每个地址该存什么, 而程序员通常并不想详细了解这些. 那怎么办呢:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;遇到问题不会解决的时候，多加一层就可以解决&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是计算机领域的一条金句, 为了解决汇编的上述问题, 通过抽象一门新的编程语言, 向程序员屏蔽掉以上细节, 可以大大的提高程序员的生产效率, 下面将介绍C语言来如何解决汇编带来的问题.&lt;/p&gt;

&lt;h3 id=&#34;2-c语言&#34;&gt;2. C语言&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy85c053c1hjTjY4cjlIUkc4RUR5cjRxaWJXdVB1ZVROYURJd0tmaWJVdFBKeVQxV1FQWnpyWXVXMjJERWlhdDZOdkFDdWxvN1VUM3MzOHM0b1pORVZ0MTBydy82NDA?x-oss-process=image/format,png&#34; alt=&#34;C语言编译&#34; /&gt;&lt;/p&gt;

&lt;p&gt;C语言是计算机世界的基石级语言, 它通过抽象的函数, 循环, 分支语句使得程序员不需要了解计算中的底层实现细节, 向程序员屏蔽了不同计算机指令架构的差异, 通过不同的编译器实现, 只需要写一份代码就可以在多个不同指令架构的机器上执行相同的逻辑.&lt;/p&gt;

&lt;p&gt;在Google有很多关于 Jeff Dean的笑话, 其中有一个关于编译器的:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jeff Dean每次写完代码, 都会编译一遍, 不是为了检查自己写的程序是否正确, 而是检查编译器是否有BUG&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;C语言并不是一门完美的语言, 写C语言的程序员往往关注程序的性能, 这就需要程序员了解性能的瓶颈在哪里, 往往又需要了解到程序的每一条指令的执行细节, 这就造成了一个矛盾的点, C语言本身是想向程序员屏蔽计算机的实现细节, 但是想要用C语言写好程序又需要程序员充分了解C语言编译生成的每条汇编的细节.&lt;/p&gt;

&lt;p&gt;同时C语言使用手动管理内存的方式, 或多或少会制造出各种内存的安全性问题, 比如空指针, 野指针等等问题, 对于程序员来说, 应付这些问题并不轻松.&lt;/p&gt;

&lt;p&gt;随着计算机硬件性能的大幅提升, 使得程序员可以不再那么多的关注程序本身的运行性能, 更多的关注程序的逻辑实现, 互联网的兴起, 又导致IO密集的应用占比大幅提高, 为了解放生产力, 需要更高层次的语言, Python就是其中的一种.&lt;/p&gt;

&lt;h3 id=&#34;3-python语言&#34;&gt;3. Python语言&lt;/h3&gt;

&lt;p&gt;问: &lt;strong&gt;Python语言是解释型语言还是编译型语言?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Python语言既是解释型语言又是编译型语言, 下面通过解释Python的运行过程来进一步说明&lt;/p&gt;

&lt;h4 id=&#34;执行过程&#34;&gt;执行过程&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/v2-7624126b628c655fad226c1d2cc57a0e_r.jpg&#34; alt=&#34;Python执行过程&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;启动编译&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Python在启动时首先加载所有的&lt;code&gt;.py&lt;/code&gt;文件并编译成字节码&lt;code&gt;.pyc&lt;/code&gt;文件, &lt;code&gt;pyc&lt;/code&gt;文件保存的Python代码编译出来的PyCode对象, 所谓的字节码到底是什么东西呢, 其实是一系列的指令, 这些指令不同于机器码的指令集, 它是Python自己定义指令集, 运行在Python VM上&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;虚拟机翻译&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Python虚拟机就是用来执行Python虚拟指令的虚拟机, VM与实体CPU类似, 通过一个大循环, 不停的执行PyCode中的指令, 与实体CPU不同的是, 它是一个中间层, 它会把Python的指令翻译成对应的C代码的调用, 最终通过CPython解释器来完成Python指令到CPU指令的翻译&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;机器码执行&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们所写的Python代码最终还是会被CPython解释成机器码到CPU上执行, 这里可以思考一下, 增加了CPython这一层后, 带来的好处, 以及坏处是什么?&lt;/p&gt;

&lt;p&gt;好处很明显, Python相对于C语言大大降低了编程的门槛, 实现同样的功能, Python代码量会比C代码少的多. 从上面的执行过程可以看出不同于C语言的可执行二进制直接加载到机器的虚拟内存空间中, Python代码需要启动时的编译过程, 执行时的VM翻译过程, 最终转换成机器码执行, 无论是VM的翻译过程, 还是最终执行机器码, 相对于C实现的机器指令的数量都会大大增加, 这个增加是千百倍的增加, 带来的差异就是同样的功能, Python的实现会比C实现慢得多.&lt;/p&gt;

&lt;h4 id=&#34;自动内存管理-gc&#34;&gt;自动内存管理(GC)&lt;/h4&gt;

&lt;p&gt;上面说完了Python的代码执行, 接下来进入内存管理, 首先问一个问题, &lt;strong&gt;Python对象是分配在堆还是栈上的?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在 Python 中，内存管理涉及到一个包含所有 Python 对象和数据结构的私有堆（heap）。这个私有堆的管理由内部的 &lt;em&gt;Python 内存管理器（Python memory manager）&lt;/em&gt; 保证。Python 内存管理器有不同的组件来处理各种动态存储管理方面的问题，如共享、分割、预分配或缓存。&lt;/p&gt;

&lt;p&gt;在最底层，一个原始内存分配器通过与操作系统的内存管理器交互，确保私有堆中有足够的空间来存储所有与 Python 相关的数据。在原始内存分配器的基础上，几个对象特定的分配器在同一堆上运行，并根据每种对象类型的特点实现不同的内存管理策略。例如，整数对象在堆内的管理方式不同于字符串、元组或字典，因为整数需要不同的存储需求和速度与空间的权衡。因此，Python 内存管理器将一些工作分配给对象特定分配器，但确保后者在私有堆的范围内运行。&lt;/p&gt;

&lt;p&gt;Python 堆内存的管理是由解释器来执行，用户对它没有控制权，即使他们经常操作指向堆内内存块的对象指针，理解这一点十分重要。Python 对象和其他内部缓冲区的堆空间分配是由 Python 内存管理器按需通过本文档中列出的 Python/C API 函数进行的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;垃圾回收&#34;&gt;垃圾回收&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;引用计数&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最基本的垃圾回收方式, PyObject对象每增加一个引用, 引用计数+1, 减少一个引用, 引用计数-1, 引用计数更新为0时, 等待被回收, 但是循环引用的对象, 计数永远不会清零, 这就需要标记清楚来辅助处理&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;标记清除&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/873883/160809972-6b6d53fc-a132-4cb3-8fc1-b68a1c0dc8d1.png&#34; alt=&#34;python&#34; width=&#34;720px&#34;&gt;&lt;/p&gt;

&lt;p&gt;Python解释器隔一段时间会进行一次全对象的扫描, 对于隔离于ROOT节点的孤立引用, 执行回收, 没有被ROOT节点引用的孤立节点, 即使引用计数大于0, 也会被回收.&lt;/p&gt;

&lt;p&gt;但是每次执行扫描, 都会产生STW, 影响程序的执行, 所以就有了内存分代&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;分代回收&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Python解释器将将对象分为三代:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0代表幼年对象&lt;/li&gt;
&lt;li&gt;1代表青年对象&lt;/li&gt;
&lt;li&gt;2代表老年对象
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对象所在分代级别越低, GC回收的频率越低, 低级别的对象如果一直没有回收, 会被转移到高级别的代中, 这样就区分了不同活跃度的对象, 提高了GC回收的效率&lt;/p&gt;

&lt;h4 id=&#34;小结&#34;&gt;小结&lt;/h4&gt;

&lt;p&gt;从以上Python执行过程与内存管理中可以看出, Python并不适用于高性能需求的场景, 而GC带来延时也使Python不适用于实时性要求高的应用, 这些场景是C语言的主战场. 但是Python由于简单的语法, 高效的编码方式, 大大提高了程序员的生产效率, 在互联网时代, 要求快速实现, 快速实验的前提下, Python也越来越流行.&lt;/p&gt;

&lt;p&gt;那么有没有一种性能够用, 又兼具开发效率的语言呢, Golang就提供了这样一种折中的选择.&lt;/p&gt;

&lt;h3 id=&#34;4-golang&#34;&gt;4. Golang&lt;/h3&gt;

&lt;p&gt;Golang是一门编译型的语言, 同C语言一样它也是通过编译器把代码直接编译为二进制的机器码来保证执行性能, 与C语言不同的时, 它在编译时会在二进制中插入一个Golang的Runtime, Runtime帮助做用户态的Goroutine的调度, 做自动内存管理. 可以说Golang继承了C语言的精华, 并对C语言程序容易出错的点, 提出了自己的改进方案.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img.draveness.me/2020-02-02-15805792666151-golang-gmp.png&#34; alt=&#34;golang&#34; width=&#34;720px&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiankunli.github.io/public/upload/go/go_memory_layout.jpeg&#34; alt=&#34;Golang内存分配&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Golang语言也不是完美的, 它的性能还是比不上极致优化的C语言, GC带来的STW也导致不能应用于实时性领域. 但是在云原生时代, 它的原生支持并发, 优秀的自动内存管理, 在开发效率与性能之间的平衡性, 给程序员提供了一个新的选择.&lt;/p&gt;

&lt;h3 id=&#34;5-总结&#34;&gt;5. 总结&lt;/h3&gt;

&lt;p&gt;笔者主要使用的语言是Python与Golang, 对Python的运用更多一些, 原因是Python在Web后端开发的应用会更方便一些, 能够快速实现功能, 解决产品需求. Golang更多应用于一些对性能/并发要求比较高的场景, 当前我们会使用Golang构建的鉴权中间承载整个部门的健全需求.&lt;/p&gt;

&lt;p&gt;没有银弹!!! 没有完美的技术, 没有完美的方案, 只有在某个时间点, 某个环境下合适的技术或方案, 如何在这些技术与方案中做抉择, 平衡各方需求, 是对程序员最大的挑战.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>项目管理对话集</title>
      <link>https://zhu327.github.io/2022/03/28/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%AF%B9%E8%AF%9D%E9%9B%86/</link>
      <pubDate>Mon, 28 Mar 2022 17:38:04 &#43;0800</pubDate>
      
      <guid>https://zhu327.github.io/2022/03/28/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%AF%B9%E8%AF%9D%E9%9B%86/</guid>
      <description>&lt;p&gt;老婆是一名具有4年工作经验的产品经理, 上一份工作聚焦在人力资源SaaS上, 现在的工作刚刚开始不到半年, 行业转向了智能家居跨境电商的内部ERP系统, 面对新的行业, 新的公司的工作流程上的一些问题, 有了以下这些对话. 通过这些对话我也回顾了一些自己工作中感悟, 这里总结一下.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-关于责任&#34;&gt;1. 关于责任&lt;/h4&gt;

&lt;p&gt;老婆:&lt;/p&gt;

&lt;p&gt;新的工作中没有项目经理的角色, 导致项目进度把握不了, 开发同学相互甩锅, 本来定的开发说3天做完吗, 结果过了3天, 去问他又说又别的事情插进来, 让我去找开发组长&lt;/p&gt;

&lt;p&gt;我:&lt;/p&gt;

&lt;p&gt;没有项目经理所以项目的流程是怎样的? 谁来主导项目, 项目流程的推进的责任人是谁? 是不是谁负责谁推进?&lt;/p&gt;

&lt;p&gt;老婆:&lt;/p&gt;

&lt;p&gt;开始进公司的时候, 说是产品经理负责制, 产品经理立项推进, 直接向老板汇报, 但是我也不知道该怎么管项目&lt;/p&gt;

&lt;p&gt;我:&lt;/p&gt;

&lt;p&gt;既然是你自己负责项目的推进, 那你就必须把控整个项目的进度, 你本身工作的内容就要包括项目经理的职责, 不是每个项目中都有固定的角色的, 小项目中一人身兼数职太常见了&lt;/p&gt;

&lt;p&gt;老婆:&lt;/p&gt;

&lt;p&gt;我本身就只想做产品的事情, 为什么要管那么多, 推来推去好烦&lt;/p&gt;

&lt;p&gt;我:&lt;/p&gt;

&lt;p&gt;即使你不是项目经理, 但是处在项目中你都必须清楚的知道项目的运行过程, 了解了项目的运行的过程后, 还要去了解项目中干系人的工作习惯, 你才好跟他们一起合作, 有了这个前提以后, 你再来考虑怎么管理项目. 项目管理就是过程的管理, 干系人的管理, 风险的管理, 现在主要的问题是你把任务分配下去了, 但是没有关注任务本身的过程, 没有及时了解任务可能出现的风险, 导致项目进度出问题&lt;/p&gt;

&lt;p&gt;老婆:&lt;/p&gt;

&lt;p&gt;(生气脸) 所以变成我的问题了, 他们自己的事情没做好, 导致延期, 能怪我嘛&lt;/p&gt;

&lt;p&gt;我:&lt;/p&gt;

&lt;p&gt;项目本身是你自己负责, 不是说你把产品经理的工作做完了就不用管了, 是你要负责从这个项目开始到项目结束的整个生命周期, 这个生产的过程也是需要你负责的, 所以回到问题, 项目延期了, 你是负责人你该不该负责&lt;/p&gt;

&lt;p&gt;老婆:&lt;/p&gt;

&lt;p&gt;那我能怎么办?&lt;/p&gt;

&lt;p&gt;我:&lt;/p&gt;

&lt;p&gt;就我刚刚说的, 你还是要关注项目的过程, 可以向项目干系人收集项目相关的进度, 风险, 如果有风险, 及时向上说明问题, 就比如你刚刚说的这个问题, 你就应该拉项目相关的人每天开个10分钟的站会, 对一下进度, 开发就会告知你他有别的事情, 然后你就要及时的去找他的组长协调开发资源, 如果实在是解决不了, 也要他给排期把原因说明, 并作为会议纪要发送到相关责任方, 后需要项目总结有问题, 那也不是你自己的问题&lt;/p&gt;

&lt;p&gt;总结:&lt;/p&gt;

&lt;p&gt;一些刚刚工作的小伙伴在工作的过程中, 往往把自己的角色限制在固定的范围内, 以为做好自己的本职工作就行了, 不要管其他人的事情. 殊不知现代工作基本都是团队协作来完成的, 往往我们的工作的绩效并不是自己做了多少事情, 而是以结果为导向, 关键是做成了什么事情, 这就导致如果你身处项目之中, 项目本身的结果才是你做这个事情的结果, 并不是说开发写完代码就可以不用管理后续了, 项目中的每个都需要负责项目的推进, 把自己放到负责人的位子上, 每个都需要关注项目的过程, 及时识别风险, 项目才会向好方向前进.&lt;/p&gt;

&lt;h4 id=&#34;2-关于沟通-向上汇报&#34;&gt;2. 关于沟通/向上汇报&lt;/h4&gt;

&lt;p&gt;老婆:&lt;/p&gt;

&lt;p&gt;这次立项会议又被老板骂了, 连续3次了, 每次都被老板骂, 你说我是不是跟老板八字不合, 要不辞职吧&lt;/p&gt;

&lt;p&gt;我:&lt;/p&gt;

&lt;p&gt;具体说一说, 每次被骂都是一样的问题吗?&lt;/p&gt;

&lt;p&gt;老婆:&lt;/p&gt;

&lt;p&gt;这次倒是不是因为产品设计的原因, 我刚开始介绍我的产品设计, 老板马上就开始反驳我, 说我这里就没按照他的想法来操作, 然后我就给他解释了我没按照他想法的原因, 他也认可了我说的原因, 说我的方向没有错, 但是不应该在立项的时候才告诉他原因&lt;/p&gt;

&lt;p&gt;我:&lt;/p&gt;

&lt;p&gt;你知道项目管理中有个概念叫干系人吧, 所有与项目相关的人都叫干系人, 但是干系人也分优先级, 在你这里老板就是优先级最高的干系人. 因为他是掌握资源的人, 你想要推进你的项目前进, 你就需要服务好掌握资源的人.&lt;/p&gt;

&lt;p&gt;从老板的角度来看, 这个想法是我布置下去的, 在我的理解中如果过程中你没有来跟我说明我的想法有问题, 那么最终你做的东西就应该按我的想法来, 但是到了立项的时候, 你突然给我来了个惊喜, 说我的想法有问题, 你搞了一个另外一个方向, 我能不骂人嘛?&lt;/p&gt;

&lt;p&gt;所以你识别出老板的想法有问题, 然后也有新的产品方向, 你要及时跟老板沟通说明, 你要去向上沟通一下, 私下的沟通10分钟, 15分钟老板还是有时间的, 并且私下沟通, 老板也不会在立项会议上那样甩脸子吧.&lt;/p&gt;

&lt;p&gt;老婆:&lt;/p&gt;

&lt;p&gt;我才不像去找他, 看到就烦&lt;/p&gt;

&lt;p&gt;我:&lt;/p&gt;

&lt;p&gt;那你都已经被怼了3次了, 每次都这样你还做的下去嘛, 你都想辞职了, 这个心态怎么弄, 你就私下找他约一下, 直接问问他自己该怎么做才会不被骂&lt;/p&gt;

&lt;p&gt;老婆:&lt;/p&gt;

&lt;p&gt;再说吧&amp;hellip;&lt;/p&gt;

&lt;p&gt;总结:&lt;/p&gt;

&lt;p&gt;很多小伙伴在工作中都是埋头做自己的事情, 不及时跟相关人沟通自己的想法, 导致结果出现偏差, 做了无用功. 项目中的尽早的沟通能避免后续更改带来的巨大的成本, 很多时候并不是拿出完美的方案才需要沟通, 一点点的想法也可以说出来, 集思广益, 通过沟通来弥补我们想法的不足.&lt;/p&gt;

&lt;p&gt;如果你的工作经常出现问题, 你得考虑下是不是工作方式的问题, 可以找你的上级聊一聊, 自己该改进些什么才能使得自己的工作更顺利, 推动自己下属的能力提升也是上级工作的一部分, 相信坦诚的聊一聊上级会给到你一些建议.&lt;/p&gt;

&lt;h4 id=&#34;3-关于被甩锅&#34;&gt;3. 关于被甩锅&lt;/h4&gt;

&lt;p&gt;老婆:&lt;/p&gt;

&lt;p&gt;今天被人投诉了, 领导还找我谈话了, 本来一个说是要HR负责的事情, 我交出去了就不管了, 最后他们还是要说是我的问题&lt;/p&gt;

&lt;p&gt;我:&lt;/p&gt;

&lt;p&gt;确定是谁负责的了吗, 是怎么确定的呢?&lt;/p&gt;

&lt;p&gt;老婆:&lt;/p&gt;

&lt;p&gt;老板在立项会上说的, 我就负责把原型画出来, 后面就交给HR确认, 后面就是她来负责&lt;/p&gt;

&lt;p&gt;我:&lt;/p&gt;

&lt;p&gt;会议由纪要有吗, 这个事情HR自己清楚吗&lt;/p&gt;

&lt;p&gt;老婆:&lt;/p&gt;

&lt;p&gt;没有纪要&lt;/p&gt;

&lt;p&gt;我:&lt;/p&gt;

&lt;p&gt;那你是怎么交给她的呢?&lt;/p&gt;

&lt;p&gt;老婆:&lt;/p&gt;

&lt;p&gt;我把文件发给她了, 她要我发到群里给大家看看, 我就发了还@她了&lt;/p&gt;

&lt;p&gt;我:&lt;/p&gt;

&lt;p&gt;你发到群里的时候@她, 有没有说她要干什么, 后续的流程需要她负责了呢&lt;/p&gt;

&lt;p&gt;老婆:&lt;/p&gt;

&lt;p&gt;没有, 我觉的我给她就结束了, 然后后面估计是老板骂了她们, 她们就说是我的问题, 我没有推进&lt;/p&gt;

&lt;p&gt;我:&lt;/p&gt;

&lt;p&gt;你这里就犯了2错误, 会议中有关键的责任划分, 一定要记录下来, 在这个会议中你要写清楚老板的结论, 你来做原型, 剩下的HR来负责, 把会议纪要发到参会人, 这就是证据. 第二个问题是交接的时候你要说清楚, 按照之前的会议结论我把原型给你了, 接下来你应该干什么, 要交代清楚, 并且有记录, 然后即使是被甩锅, 你也可以把会议纪要, 交接的记录拿出来, 这个锅就不是你的&lt;/p&gt;

&lt;p&gt;总结:&lt;/p&gt;

&lt;p&gt;项目中的各种会议中的与自己相关的决议一定要及时确认清楚, 并告知到所有的相关人, 并且要有记录, 项目流程中的责任交接, 也要做好记录, 知会相关人她要干什么, 确定好责任是什么.&lt;/p&gt;

&lt;p&gt;小伙伴们在工作中如果真的是自己的锅, 就得认, 回顾自己问题, 下次不要再犯, 但是如果被甩锅了, 一定要理性的对待, 找出证据, 说明不是自己的问题. 项目管理往往是对过程的管理, 所以我们的每个结论, 每个交接内容修需要有记录, 从而在划分责任时才能有理有据.&lt;/p&gt;

&lt;p&gt;另外在如何定义事情是否做完上这个问题上, 每个人对事情做完的理解可能都不一样, 所以在项目相关的会议上我们要清楚的确认自己的责任, 自己需要做的事情, 产出物是什么, 做到&lt;strong&gt;事事有回应 件件有着落 凡事有交代&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>领域驱动设计与微服务</title>
      <link>https://zhu327.github.io/2020/10/22/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Thu, 22 Oct 2020 17:38:04 &#43;0800</pubDate>
      
      <guid>https://zhu327.github.io/2020/10/22/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid>
      <description>&lt;h3 id=&#34;drf的起手式&#34;&gt;DRF的起手式&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CURD Boy的通常的工作模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1251544432.cos.ap-guangzhou.myqcloud.com/blog/image-20201010162649717.png&#34; alt=&#34;image-20201010162649717&#34;  /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;先设计Serializer还是先设计Model?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;问题是什么&#34;&gt;问题是什么&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1251544432.cos.ap-guangzhou.myqcloud.com/blog/image-20201010162706372.png&#34; alt=&#34;image-20201010162706372&#34;  /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;框架捆绑

&lt;ul&gt;
&lt;li&gt;写框架无关的代码&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;复杂的逻辑会陷入职责不清晰, 交叉依赖

&lt;ul&gt;
&lt;li&gt;抽象一层&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;面向对象&#34;&gt;面向对象&lt;/h3&gt;

&lt;p&gt;SOLID原则&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SRP&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Single Responsibility Principle&lt;/td&gt;
&lt;td&gt;单一责任原则&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OCP&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Open Closed Principle&lt;/td&gt;
&lt;td&gt;开放封闭原则&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;LSP&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Liskov Substitution Principle&lt;/td&gt;
&lt;td&gt;里氏替换原则&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DIP&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Dependency Inversion Principle&lt;/td&gt;
&lt;td&gt;依赖倒置原则&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ISP&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Interface Segregation Principle&lt;/td&gt;
&lt;td&gt;接口分离原则&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;clean-architecture&#34;&gt;clean Architecture&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1251544432.cos.ap-guangzhou.myqcloud.com/blog/201507-CleanArchitecture.jpg&#34; alt=&#34; &#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;实体: 模型, 比如权限中心的一条策略就是一个实体, 它具有唯一的ID

&lt;ul&gt;
&lt;li&gt;模型不是分散的, 与存储无关, 避免交叉依赖&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;用例: 业务的使用规则, 实例在某种场景下的使用方式, 一段实体的使用逻辑

&lt;ul&gt;
&lt;li&gt;与api无关, 只与业务逻辑相关&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;对外暴露接口与适配器

&lt;ul&gt;
&lt;li&gt;隐藏用例与实体, 只对外暴露接口&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;框架, 驱动

&lt;ul&gt;
&lt;li&gt;对接接口, 实现适配器接口&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;从业务出发, 以业务逻辑为核心构建系统&lt;/li&gt;
&lt;li&gt;灵活的使用外部依赖, 扩展方便&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;六边形架构&#34;&gt;六边形架构&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1251544432.cos.ap-guangzhou.myqcloud.com/blog/3-application.jpg&#34; alt=&#34;img&#34; style=&#34;zoom: 80%;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;以业务为核心, 外部依赖全部做成适配器, 方便替换&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;领域驱动设计&#34;&gt;领域驱动设计&lt;/h3&gt;

&lt;p&gt;为解决复杂的现实问题的一种设计模式, 将数据和行为封装在一起，并与现实世界中的业务对象相映射。各类具备明确的职责划分，将领域逻辑分散到领域对象中。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;业务架构——根据业务需求设计业务模块及其关系&lt;/li&gt;
&lt;li&gt;系统架构——设计系统和子系统的模块&lt;/li&gt;
&lt;li&gt;技术架构——决定采用的技术及框架&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DDD的核心诉求就是将业务架构映射到系统架构上，在响应业务变化调整业务架构时，也随之变化系统架构。&lt;/p&gt;

&lt;h3 id=&#34;什么是领域&#34;&gt;什么是领域&lt;/h3&gt;

&lt;p&gt;在互联网兴起之前, 传统的软件行业, 做的软件都是在解决现实中已经存在的问题, 软件的意义在于提示现实问题处理的效率, 比如电子商务, 现实中的商务模式只怎样运转的, 电子商务就是怎样运转的, 软件系统的意义在于大大提升了商务模式的运转的效率, 所以要设计一个好的软件系统, 先要有足够的领域知识, 以现实中出现的问题为基础, 构建领域的模型&lt;/p&gt;

&lt;p&gt;已订单模型为例, 同样是订单, 对于购买客户展示的订单与对商户展示的订单信息就不一样, 操作也不一样, 这就需要对模型进行域的划分, 分别分为客户域与商户域&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1251544432.cos.ap-guangzhou.myqcloud.com/blog/image-20201010170636576.png&#34; alt=&#34;image-20201010170636576&#34;  /&gt;&lt;/p&gt;

&lt;h3 id=&#34;领域语言&#34;&gt;领域语言&lt;/h3&gt;

&lt;p&gt;定义术语, 识别出领域内的用例主谓宾, 主语: 实体, 谓语: 用例, 宾语: 值对象, 比如在权限中心, 管理员对用户授权了xx权限&lt;/p&gt;

&lt;h3 id=&#34;领域模型-entry与valueobject&#34;&gt;领域模型 &amp;ndash; Entry与ValueObject&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://www.cosmicpython.com/book/images/apwp_0104.png&#34; alt=&#34;apwp 0104&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实体&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当一个对象由其标识（而不是属性）区分时，这种对象称为实体（Entity）。&lt;/p&gt;

&lt;p&gt;在权限中心, 用户, 管理员, 策略, 都有唯一的标志, 可以分门别类划分到各自域的实体&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;值对象&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当一个对象用于对事务进行描述而没有唯一标识时，它被称作值对象（Value Object）。&lt;/p&gt;

&lt;p&gt;权限中心中, 策略中的拓扑, 属性, 这些没有唯一标志的值, 就是值对象&lt;/p&gt;

&lt;h3 id=&#34;repository&#34;&gt;Repository&lt;/h3&gt;

&lt;p&gt;数据存储的adapter, 以Entry为参数, 保存实体信息到存储引擎, 从数据库中加载数据为实体对象&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.cosmicpython.com/book/images/apwp_0201.png&#34; alt=&#34;apwp 0201&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;好处:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;简单的接口, 解耦了对存储的依赖&lt;/li&gt;
&lt;li&gt;方便进行单元测试, 通过Facke Repository&lt;/li&gt;
&lt;li&gt;开考虑如何存储数据前, 专注于解决业务问题, 使得模型更加贴合实际问题&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;坏处:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;增加了额外的代码逻辑, 提高的维护的成本&lt;/li&gt;
&lt;li&gt;有一些逻辑可能ORM框架就已经支持了&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;service&#34;&gt;Service&lt;/h3&gt;

&lt;p&gt;服务层, 领域模型的使用用例, 一些重要的领域行为或操作，可以归类为领域服务。它既不是实体，也不是值对象的范畴。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.cosmicpython.com/book/images/apwp_0402.png&#34; alt=&#34;apwp 0402&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;好处:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;提供一个单一的地方放所以的用例&lt;/li&gt;
&lt;li&gt;通过服务层来把领域模型隐藏在api后面, 方便对领域层做重构&lt;/li&gt;
&lt;li&gt;把定制http相关的协议改变成了定制服务的协议, 接口只是服务层的派生&lt;/li&gt;
&lt;li&gt;有了存储层后, 可以方便的使用Fake存储来做测试&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;坏处:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果你的app是一个纯粹的web服务, MVC就可很好的处理用例了, 不需要增加多余复杂度&lt;/li&gt;
&lt;li&gt;服务层是另外的一个抽象&lt;/li&gt;
&lt;li&gt;服务层承载了太多的逻辑, 会导致领域层成为贫血模式&lt;/li&gt;
&lt;li&gt;在采用服务层前, 需要理清控制面上的逻辑编排&lt;/li&gt;
&lt;li&gt;把控制面的逻辑下沉到领域模型上, 可以得到胖模型, 瘦控制&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;unit-of-work&#34;&gt;Unit of Work&lt;/h3&gt;

&lt;p&gt;service层中直接对接了Repository, 处理了太多事务相关的逻辑, 通过UOW来封装事务的处理&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.cosmicpython.com/book/images/apwp_0602.png&#34; alt=&#34;apwp 0602&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;好处:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;对于原子操作有一个更好的抽象, 通过上下文管理器直观的看到哪些逻辑组合在一起&lt;/li&gt;
&lt;li&gt;对事务的开始与结束有了明确的定义&lt;/li&gt;
&lt;li&gt;提供了实例化存储类的地方&lt;/li&gt;
&lt;li&gt;帮助处理事件与消息总线&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;坏处:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;可能ORM已经有类似的封装&lt;/li&gt;
&lt;li&gt;看起来简单, 但是还要处理回滚, 多线程, 嵌条事务等情况&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;aggregate&#34;&gt;Aggregate&lt;/h3&gt;

&lt;p&gt;Aggregate(聚合）是一组相关对象的集合，作为一个整体被外界访问，聚合根（Aggregate Root）是这个聚合的根节点。&lt;/p&gt;

&lt;p&gt;有了Service与UOA后, 往往会导致Service的逻辑复杂, 而领域模型上的逻辑非常简单, 甚至于没有相关的方法, 这就是所谓的贫血模式/失血模式, 这时候就需要一种新的抽象来承载领域模型上的相关逻辑, Aggregate&lt;/p&gt;

&lt;p&gt;以权限中心为例, 每次操作的Policy并不是一个, 而是一批, 这时候就可以定义PolicyAggregate, 来把批量的Policy操作的方法封装在聚合之中&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.cosmicpython.com/book/images/apwp_0701.png&#34; alt=&#34;apwp 0701&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;好处:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;聚会可以定义出哪些模型是可以暴露, 那些不暴露&lt;/li&gt;
&lt;li&gt;显示的定义界限上下文, 有助于提高ORM性能&lt;/li&gt;
&lt;li&gt;由聚合来负责状态的变更, 更容易控制内部数据, 提供统一的出入口&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;坏处:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;对于新开发者不友好, 需要多理解一个概念&lt;/li&gt;
&lt;li&gt;严格定义聚合的单一职责, 对于思维的考研很大&lt;/li&gt;
&lt;li&gt;不同聚合之间数据的最终一致可能很麻烦&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;event-drive&#34;&gt;Event Drive&lt;/h3&gt;

&lt;p&gt;领域事件是对领域内发生的活动进行的建模。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.cosmicpython.com/book/images/apwp_0801.png&#34; alt=&#34;apwp 0801&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;好处:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;消息总线解耦了不同逻辑之间的耦合, 通过响应消息实现多种逻辑的处理&lt;/li&gt;
&lt;li&gt;时间响应的处理与核心的领域逻辑得到隔离&lt;/li&gt;
&lt;li&gt;领域时间实际上是现实问题的一种抽象, 可以跟领域语言有机的结合到一起&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;坏处:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;消息总线隔离各种逻辑, 不方便梳理整体逻辑&lt;/li&gt;
&lt;li&gt;要小心消息的循环依赖&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;完全的事件驱动&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.cosmicpython.com/book/images/apwp_0902.png&#34; alt=&#34;apwp 0902&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;好处:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;handler与service变成了一个, 架构简化&lt;/li&gt;
&lt;li&gt;事件对于api与handle的参数传递提供统一的结构&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;坏处:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;对于web服务来说, 消息总线不是一个可以感知的过程, 异步逻辑不知道什么时候完成&lt;/li&gt;
&lt;li&gt;事件对象与模型对象存在大量相同的字段, 修改时也要同时修改&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;引入命令模式:&lt;/p&gt;

&lt;p&gt;好处:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;区分出命令与事件, 可以清晰的定义出哪些是必须完成的, 哪些是额外的逻辑&lt;/li&gt;
&lt;li&gt;命令名称相对于事件更明确&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;坏处:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;命令与事件语义上的差异可能很小, 要小心区分&lt;/li&gt;
&lt;li&gt;明确的处理失败与异常, 使得影响变小, 逻辑更加难理解, 需要增加更多监控&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;事件驱动的微服务:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.cosmicpython.com/book/images/apwp_1101.png&#34; alt=&#34;apwp 1101&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;好处:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;避免依赖大泥球&lt;/li&gt;
&lt;li&gt;分离服务: 更新与新增单个服务更简单&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;坏处:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;整理流程的信息很难直观看出来&lt;/li&gt;
&lt;li&gt;需要理解最终一致性&lt;/li&gt;
&lt;li&gt;消息的可靠性需要权衡: 至少一次还是最多一次&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;cqrs&#34;&gt;CQRS&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://www.cosmicpython.com/book/images/apwp_1201.png&#34; alt=&#34;apwp 1201&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;命令于查询分离&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;查询&lt;/th&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;行为&lt;/td&gt;
&lt;td&gt;简单&lt;/td&gt;
&lt;td&gt;负责业务逻辑&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;缓存&lt;/td&gt;
&lt;td&gt;可缓存&lt;/td&gt;
&lt;td&gt;不可缓存&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;一致性&lt;/td&gt;
&lt;td&gt;可能延迟&lt;/td&gt;
&lt;td&gt;事务一致&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;微服务&#34;&gt;微服务&lt;/h3&gt;

&lt;h3 id=&#34;宏服务的问题&#34;&gt;宏服务的问题&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;代码量变大: 模块之间没有严格的界限, 想要理解系统整体困难, 随着代码的增加复杂度增加, 变更的成本变高, 降低迭代速度&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;资源利用低效: 整体服务占用大量的内存, 不管其中模块是否被大量的使用, 占用所有的数据库连接, 不管有没有使用&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;带来可扩展的问题: 即使能实现横向的扩展, 但是开发的过程中由于团队的人员变多, 也会带来版本迭代上的冲突, 除非有很好的职责划分, 不同团队之间的沟通, 会带来效率的降低&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;部署困难: 每次部署都需要保证所有模块的正确性, 其中某个模块出问题, 会导致整个系统的崩溃&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;技术的限制: 在选定一种技术后, 整个系统的技术就被限制了, 比如Python, 想要更改会非常困难&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;bug影响: 一个模块的bug可能会影响到整个系统, 一个模块的资源占用过多, 也会影响到整个系统&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;微服务-1&#34;&gt;微服务&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;模块之间松耦合&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;独立部署&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;每个微服务互相通信&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;为了提供整体的服务, 需要把微服务暴露成一个整体, 微服务隐藏在整体后面&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;优点:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;微服务之间使用统一的通信协议通信, http-json, 更加通用一些, rpc更加高效&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;更好的资源利用率, 每个服务都是可控的, 按需分配资源&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;每个微服务都很小, 代码量少更简单, 重构更方便, 可以选择不同的技术栈&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;某些服务可以隐藏在微服务后面, 不对外提供, 更加安全&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;由于系统的独立, 一个服务的崩溃不会导致整体的崩溃&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;每个服务都是独立维护, 提高团队的开发效率&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;缺点:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;迁移到微服务很困难, 需要付出大量的开发成本, 初期会带来很多混乱&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;微服务的会带来组织架构上的调整, 而一般公司的组织架构是很难改变的, 就会导致职责的分不清&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;学习曲线陡峭, 开发人员需要学习相关的开发模式, 需要开发运维相关的培训&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;调试更加困难&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;划分微服务本身很困难, 需要警惕多个独立服务合并到一个服务中, 这样就偏离的迁移微服务的初衷&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;违法对于团队配合会带来困难, 不同的团队会站在自己的角度思考, 沟通协调需要付出更多的成本&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在整体功能与每个微服务的功能之间需要做平衡, 没有很好的配合, 团队之间会出现信息孤岛, 重复造轮子. 应该共享知识, 共享经验&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;敏捷开发的同时, 需要各个团队落地的文档就有要求了, 可以减少沟通, 但是增加额外的工作量&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果有对其它服务的依赖, 会增加请求的响应时间&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;没有银弹, 没有完美的技术, 只有合适的技术.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>读书方法论</title>
      <link>https://zhu327.github.io/2020/05/07/%E8%AF%BB%E4%B9%A6%E6%96%B9%E6%B3%95%E8%AE%BA/</link>
      <pubDate>Thu, 07 May 2020 18:45:08 &#43;0800</pubDate>
      
      <guid>https://zhu327.github.io/2020/05/07/%E8%AF%BB%E4%B9%A6%E6%96%B9%E6%B3%95%E8%AE%BA/</guid>
      <description>&lt;p&gt;从2017年决定补计算机基础开始, 至今已经读了50来本计算机书籍. 读书的时间总是很宝贵, 如何正确的读书呢? 下面是我的一些经验与总结.&lt;/p&gt;

&lt;h3 id=&#34;读书的目的&#34;&gt;读书的目的&lt;/h3&gt;

&lt;p&gt;我们读书的目的是什么? 概况起来可以分为以下2种:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;学习知识&lt;/li&gt;
&lt;li&gt;提升自己的能力&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们在上学时专注与学习知识, 所以书本上的每一部分我们都需要了解, 所以我们需要一遍一遍的读, 抓住书本种每一个知识点.&lt;/p&gt;

&lt;p&gt;但是在工作后, 我们读书是为了解决问题, 提升自己的能力, 知识 != 能力, 工作后我们读书的主语不再是知识, 而是自己, 面向自己读书需要一些方法.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;sq3r&#34;&gt;SQ3R&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;综览(Survey): 开始读书前, 先浏览书本的目录, 粗读文章的标题, 调查出书本的大致内容&lt;/li&gt;
&lt;li&gt;提问(Question): 结合书本内容与自己的实际, 尝试向自己发问, 总结出自己可能在书本种收获的内容&lt;/li&gt;
&lt;li&gt;阅读(Read): 带着问题认真在书本种找出答案&lt;/li&gt;
&lt;li&gt;复述(Recite): 使用自己语言描述出问题的答案&lt;/li&gt;
&lt;li&gt;回顾(Review): 回忆解决问题的方法, 并在实践中使用, 使用知识提升自己的能力&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;拆书法&#34;&gt;拆书法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I 使用自己的语言重述信息&lt;/li&gt;
&lt;li&gt;A1 描述自己的相关经验 &amp;ndash; 总结自己在面对问题时是怎么做的&lt;/li&gt;
&lt;li&gt;A2 我的应用(目标与行动) &amp;ndash; 根据掌握的信息结合自己的实际指定改进方案并实践, 能力得到提升&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;常见问题&#34;&gt;常见问题&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I 附会旧知&lt;/li&gt;
&lt;li&gt;A1 泛泛而谈&lt;/li&gt;
&lt;li&gt;A2 决心泛滥, 感慨万千&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;思维方式&#34;&gt;思维方式&lt;/h3&gt;

&lt;h4 id=&#34;前车可鉴&#34;&gt;前车可鉴&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;作者是怎么引出这个信息的?&lt;/li&gt;
&lt;li&gt;为什么这件事对我重要?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;相因相生&#34;&gt;相因相生&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;作者提出了哪些关于原因的假设?&lt;/li&gt;
&lt;li&gt;是怎么验证或排除这些假设的?&lt;/li&gt;
&lt;li&gt;还有其它可能吗?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;以观后效&#34;&gt;以观后效&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;若依从信息去做后会怎么样?&lt;/li&gt;
&lt;li&gt;对我的好处是什么?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;自食其果&#34;&gt;自食其果&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;不这么做的后果是什么?&lt;/li&gt;
&lt;li&gt;不改变的问题有多严重?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;适得其反&#34;&gt;适得其反&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;有没有相反的观点?&lt;/li&gt;
&lt;li&gt;有没有不支持这个的实例?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;使用条件&#34;&gt;使用条件&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;要这样做, 具体的条件(成本, 收益, 态度, 能力)?&lt;/li&gt;
&lt;li&gt;什么情况下是不管用的?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;旁敲边鼓&#34;&gt;旁敲边鼓&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;从前有没有类似的信息?&lt;/li&gt;
&lt;li&gt;其它领域/行业/作者是如何看代类似的问题?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;楚河汉界&#34;&gt;楚河汉界&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无论是相反的还是类似的信息, 和这个信息真正的区别是什么? 交界在哪里?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;知识体系&#34;&gt;知识体系&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;思维带来表达的提升(成长思维, 批判型思维, 系统思维)&lt;/li&gt;
&lt;li&gt;从零到一成为专家&lt;/li&gt;
&lt;li&gt;智慧影响待人接物&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;知识管理&#34;&gt;知识管理&lt;/h3&gt;

&lt;p&gt;碎片化时代的知识管理, 重点不是对承载知识的文档和文章进行管理, 而是对加工知识的大脑进行管理.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
