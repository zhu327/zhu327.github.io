<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on </title>
    <link>https://zhu327.github.io/tags/python/</link>
    <description>Recent content in Python on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 16 Jun 2016 17:51:21 +0800</lastBuildDate>
    
	<atom:link href="https://zhu327.github.io/tags/python/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python协程</title>
      <link>https://zhu327.github.io/2016/06/16/python%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Thu, 16 Jun 2016 17:51:21 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2016/06/16/python%E5%8D%8F%E7%A8%8B/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-cn/%E5%8D%8F%E7%A8%8B&#34;&gt;https://zh.wikipedia.org/zh-cn/%E5%8D%8F%E7%A8%8B&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;协程可以理解为线程中的微线程，通过手动挂起函数的执行状态，在合适的时机再次激活继续运行，而不需要上下文切换。所以在python中使用协程会比线程性能更好。&lt;/p&gt;

&lt;h3 id=&#34;tornado协程&#34;&gt;Tornado协程&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/wyx819/article/details/45420017&#34;&gt;http://blog.csdn.net/wyx819/article/details/45420017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面有大牛分析的Tornado的线程实现，依赖与Tornado的IOLoop，所以不能单独拿出来使用。有几个需要理解的概念:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Future对象
用来保存异步获取到的结果，并在set_reslut的时候调用callback方法，把对应的callback方法放到ioloop的callback列表中等待下一次ioloop循环再执行&lt;/li&gt;
&lt;li&gt;装饰器coroutine
在这个装饰器中实现了协程的调度，通过不断的调用next函数来不断获取Future对象，然后每次拿到Future对象在add_callback到ioloop上，等到Future被set_reslut后再次next，直到生成器中抛出Return的异常。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;具体的实现过程不是很好描述，调度过程比较复杂，还是看看参考文章大牛的解析吧。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openshift平台DIY环境配置Tornado</title>
      <link>https://zhu327.github.io/2015/07/02/openshift%E5%B9%B3%E5%8F%B0diy%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEtornado/</link>
      <pubDate>Thu, 02 Jul 2015 16:37:48 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2015/07/02/openshift%E5%B9%B3%E5%8F%B0diy%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEtornado/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;openshift官方和社区提供不少配置好的环境，也包括python2.7和python3.3下的tornado套件。&lt;br /&gt;
一方面希望拥有更高的使用自由，另一方面希望熟悉一下openshift的DIY环境，本着这个目的，自行创建一个DIY环境，在上面安装运行python 2.7.10和Tornado 3.2。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;【Step1、创建DIY环境】&lt;/p&gt;

&lt;p&gt;【Step2、安装python 2.7.10】&lt;/p&gt;

&lt;p&gt;通过&lt;code&gt;python -V&lt;/code&gt;看到系统已预装&lt;code&gt;python 2.6.6&lt;/code&gt;，直接在&lt;code&gt;$OPENSHIFT_DATA_DIR&lt;/code&gt;下安装2.7.10可以正常使用，但需要注意其调用路径为&lt;code&gt;$OPENSHIFT_DATA_DIR/bin/python&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>邮件密码找回功能实现</title>
      <link>https://zhu327.github.io/2015/06/04/%E9%82%AE%E4%BB%B6%E5%AF%86%E7%A0%81%E6%89%BE%E5%9B%9E%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 04 Jun 2015 15:15:53 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2015/06/04/%E9%82%AE%E4%BB%B6%E5%AF%86%E7%A0%81%E6%89%BE%E5%9B%9E%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;

&lt;p&gt;公司做项目,有用到注册,登录,密码找回等功能,以前自己写的论坛也实现了邮件密码找回,不过比较简单,直接生成随机密码,把新密码发送到用户邮箱.比较不安全,要实现一般网站的用链接找回的功能.&lt;/p&gt;

&lt;p&gt;对链接的要求有如下:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;每次生成的链接都必须不一样;&lt;/li&gt;
&lt;li&gt;链接要有过期时间,过期以后无效;&lt;/li&gt;
&lt;li&gt;后台在链接被请求时,必须验证链接是否有效.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Python性能提升小贴士</title>
      <link>https://zhu327.github.io/2015/01/31/python%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E5%B0%8F%E8%B4%B4%E5%A3%AB/</link>
      <pubDate>Sat, 31 Jan 2015 15:44:39 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2015/01/31/python%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E5%B0%8F%E8%B4%B4%E5%A3%AB/</guid>
      <description> 用xrange循环时代替range &#39;&#39;.join() 替代 + while 1替代while True 列表推到 &amp;gt; for循环 &amp;gt; while循环 用cProfile, cStringIO and cPickle 用局部变量好于全局变量 itertools用各种迭代器，生成器 用map, reduce, filter替代列表推倒或循环 判断 a in b时，字典与集合好于列表和元组  </description>
    </item>
    
    <item>
      <title>Python资源存档</title>
      <link>https://zhu327.github.io/2015/01/27/python%E8%B5%84%E6%BA%90%E5%AD%98%E6%A1%A3/</link>
      <pubDate>Tue, 27 Jan 2015 23:50:19 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2015/01/27/python%E8%B5%84%E6%BA%90%E5%AD%98%E6%A1%A3/</guid>
      <description>&lt;h3 id=&#34;python&#34;&gt;python&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://python-documentation-cn.readthedocs.org/en/latest/&#34;&gt;python 2.7.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docspy3zh.readthedocs.org/en/latest/index.html&#34;&gt;python 3.2.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WSGI与Tornado想到的</title>
      <link>https://zhu327.github.io/2014/12/26/wsgi%E4%B8%8Etornado%E6%83%B3%E5%88%B0%E7%9A%84/</link>
      <pubDate>Fri, 26 Dec 2014 23:59:11 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2014/12/26/wsgi%E4%B8%8Etornado%E6%83%B3%E5%88%B0%E7%9A%84/</guid>
      <description>&lt;h3 id=&#34;tornado&#34;&gt;Tornado&lt;/h3&gt;

&lt;p&gt;上周用tornado实现了&lt;a href=&#34;https://github.com/zhu327/rss&#34;&gt;RSS Factory&lt;/a&gt;，又从新学了下Tornado下的使用，再次看&lt;a href=&#34;http://demo.pythoner.com/itt2zh/index.html&#34;&gt;introduce to tornado&lt;/a&gt;发现以前看的只学到了Tornado的MVC，使用Tornado也只停留在表面，没有学到Tornado的精髓。这次又学到了不少，这里总结下。&lt;/p&gt;

&lt;h3 id=&#34;长连接-websocket与异步事件循环&#34;&gt;长连接,WebSocket与异步事件循环&lt;/h3&gt;

&lt;p&gt;Web2.0时代产生了很多的实时通知需求，也就是Ajax请求特别多，最初是用轮询实现，但是对服务器的开销很大，所以产生了长连接轮询。&lt;/p&gt;

&lt;p&gt;客户的也就是浏览器请求一个api，Tornado不会立即返回，而是等到有变化的时候返回，浏览器获取响应后，循环再请求api，这样就省掉了很多请求，而且实现了实时通知。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用MongoDB</title>
      <link>https://zhu327.github.io/2014/10/02/%E4%BD%BF%E7%94%A8mongodb/</link>
      <pubDate>Thu, 02 Oct 2014 11:50:28 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2014/10/02/%E4%BD%BF%E7%94%A8mongodb/</guid>
      <description>&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ibm.com/developerworks/cn/opensource/os-mongodb4/&#34;&gt;探索 MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/hangxin1940/archive/2012/07/29/2806471.html&#34;&gt;PyMongo 教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;

&lt;p&gt;MongoDB是一个流行的NoSQL数据库程序，MongoDB使用起来比较像关系数据库，比较容易上手，由于使用BSON(一种二进制的json)格式数据，所以能使用python原生的字典数据类型来存储，相比MySQL操作跟简单。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Memcached 优化 MySQL 查询</title>
      <link>https://zhu327.github.io/2014/09/24/memcached-%E4%BC%98%E5%8C%96-mysql-%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Wed, 24 Sep 2014 22:13:57 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2014/09/24/memcached-%E4%BC%98%E5%8C%96-mysql-%E6%9F%A5%E8%AF%A2/</guid>
      <description>&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://bozpy.sinaapp.com&#34;&gt;跬步&lt;/a&gt;上线后，SAE后台显示云豆的消耗http与MySQL查询各占一半，正好SAE还支持Memcached，本着不用白不用的原则，为&lt;a href=&#34;https://github.com/zhu327/blog/blob/memcached/www/transwarp/db.py&#34;&gt;db.py&lt;/a&gt;加上了Memcached的缓存支持。&lt;/p&gt;

&lt;p&gt;网站在并发不大的情况下，MySQL查询时间还感受不出来，但是如果并发大的化，MySQL会显著的降低响应速度，所以Memcached应运而生。&lt;/p&gt;

&lt;p&gt;Memcached是一个分布式的内存key-value存储系统，由于数据保存在内存中所以查询速度非常快，一般作为其它数据的中间缓存层来使用。&lt;/p&gt;

&lt;p&gt;对于SQL查询先以SQL语句为key查询Memcached，如果查到直接返回，如果没有再去查询MySQL，并把结果缓存到Memcached，下次再次查询时速度显著提升，因为Memcached的数据是保存在内存中的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jinja2 模版引擎</title>
      <link>https://zhu327.github.io/2014/09/24/jinja2-%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8E/</link>
      <pubDate>Wed, 24 Sep 2014 21:46:07 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2014/09/24/jinja2-%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8E/</guid>
      <description>&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.jinkan.org/docs/jinja2/&#34;&gt;Jinja2 文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oschina.net/question/5189_3943&#34;&gt;Jinja2 简明使用手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;api&#34;&gt;API&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;jinja2&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileSystemLoader&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;env&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileSystemLoader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;templ_dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python Web farmwork</title>
      <link>https://zhu327.github.io/2014/09/24/python-web-farmwork/</link>
      <pubDate>Wed, 24 Sep 2014 20:52:31 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2014/09/24/python-web-farmwork/</guid>
      <description>&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0014023080708565bc89d6ab886481fb25a16cdc3b773f0000&#34;&gt;编写Web框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zhu327/blog/blob/master/www/transwarp/web.py&#34;&gt;web.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://bozpy.sinaapp.com/blog/7&#34;&gt;上一节&lt;/a&gt;写了WSGI与Cookie相关的内容，为了方便的实现Web App，需要编写一个简单的Web框架，需要实现以下功能:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;处理request；&lt;/li&gt;
&lt;li&gt;生成response header；&lt;/li&gt;
&lt;li&gt;根据request URI找到对应处理的函数，即URL路由；&lt;/li&gt;
&lt;li&gt;定制模版引擎；&lt;/li&gt;
&lt;li&gt;拦截器，在处理函数产生响应前，做预处理，相当于WSGI中middlware的概念，比如处理Cookie等。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WSGI 理解</title>
      <link>https://zhu327.github.io/2014/09/21/wsgi-%E7%90%86%E8%A7%A3/</link>
      <pubDate>Sun, 21 Sep 2014 10:52:47 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2014/09/21/wsgi-%E7%90%86%E8%A7%A3/</guid>
      <description>&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/on_1y/article/details/18803563&#34;&gt;WSGI 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/russellluo/p/3338616.html&#34;&gt;用Python写一个简单的Web框架&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;wsgi-简介&#34;&gt;WSGI 简介&lt;/h3&gt;

&lt;p&gt;WSGI是Python webserver与Web App之间的协议。这个协议定义了Web server和App的行为，是的server与app分离，简化了开发。&lt;/p&gt;

&lt;p&gt;WSGI server，Gunicorn(python实现)，uWSGI(C实现)，这些服务器程序都实现了标准的WSGI接口，任意web app都可以使用不同的server。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>urllib2 使用</title>
      <link>https://zhu327.github.io/2014/09/17/urllib2-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 17 Sep 2014 21:46:29 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2014/09/17/urllib2-%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h3 id=&#34;基础用法&#34;&gt;基础用法&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;urllib2&lt;/code&gt;是用来发送http请求，获取响应数据的库。基础用法:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;urllib2&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# urlopen返回类文件对象，可选参数data与请求头header&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urllib2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urlopen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http://bozpy.sinaapp.com&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 类文件对象有与文件对象类似的方法，read，readline等&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;heade&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 获取响应的头，字典&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;geturl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 获取响应的真实url，如果有重定向，url会改变&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ORM 对象关系映射</title>
      <link>https://zhu327.github.io/2014/09/16/orm-%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/</link>
      <pubDate>Tue, 16 Sep 2014 22:51:10 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2014/09/16/orm-%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/</guid>
      <description>&lt;h3 id=&#34;orm概念&#34;&gt;ORM概念&lt;/h3&gt;

&lt;p&gt;wikipedia: &lt;a href=&#34;http://zh.wikipedia.org/wiki/对象关系映射&#34;&gt;对象关系映射&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;简单的说ORM就是通过操作Python中的对象来实现对关系数据库(MySQL)中数据的操作。&lt;code&gt;Model&lt;/code&gt;类与数据库表映射，&lt;code&gt;Model&lt;/code&gt;对象与数据库中的行映射，对象的属性与表中的字段映射。&lt;/p&gt;

&lt;h3 id=&#34;用python实现基本功能的orm&#34;&gt;用Python实现基本功能的ORM&lt;/h3&gt;

&lt;p&gt;首先定义&lt;code&gt;Field&lt;/code&gt;类，代表DB中tabale的每一个字段，对象初始化的时候需要定义的属性有，字段名称，字段数据类型，是否为主键，是否可为空，字段默认值，是否可更改等字段属性&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 中的元类</title>
      <link>https://zhu327.github.io/2014/09/15/python-%E4%B8%AD%E7%9A%84%E5%85%83%E7%B1%BB/</link>
      <pubDate>Mon, 15 Sep 2014 22:52:27 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2014/09/15/python-%E4%B8%AD%E7%9A%84%E5%85%83%E7%B1%BB/</guid>
      <description>&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.jobbole.com/21351/&#34;&gt;深刻理解Python中的元类(metaclass)&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;类与类的创建&#34;&gt;类与类的创建&lt;/h3&gt;

&lt;p&gt;Python中的class也是object，所以类可以作为参数，作为函数返回值，作为对象获取属性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;myObject&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 获取对象的类&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# &amp;lt;class &amp;#39;__main__.MyClass&amp;#39;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 所有的类都是type类的对象&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# &amp;lt;type &amp;#39;type&amp;#39;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;myObject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__class__&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 获取对象的类&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# &amp;lt;class &amp;#39;__main__.MyClass&amp;#39;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MyClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__class__&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# &amp;lt;type &amp;#39;type&amp;#39;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 使用 MySQL</title>
      <link>https://zhu327.github.io/2014/09/15/python-%E4%BD%BF%E7%94%A8-mysql/</link>
      <pubDate>Mon, 15 Sep 2014 19:36:00 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2014/09/15/python-%E4%BD%BF%E7%94%A8-mysql/</guid>
      <description>&lt;h3 id=&#34;mysqldb基本使用方式&#34;&gt;MySQLdb基本使用方式&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;MySQLdb&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 建立MySQL连接&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MySQL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;passwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;passwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cursor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cursor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 生成游标对象&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cursor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;SQL &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 游标对象执行SQL语句，语句中有%s，则用args替换&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# 执行SELECT语句通过以下方法可获取到查询结果&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cursor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fetchall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 结果为列表，列表每一项代表查询的一row，每行都是一个列表，列表顺序按照SELECT的字段顺序排序&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cursor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fetchone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 获取查询到结果的第一行数据，返回列表，再次运行获取下一条&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;cursor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;description&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 查询到字段定义信息&lt;/span&gt;

    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cursor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 序列的第一个值为字段名称&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# 执行INSERT DELETE操作获取受影响的行数&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cursor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowcount&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# 获取INSERT行的主键值，一般是id&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cursor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lastrowid&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 游标对象执行语句是以事务方式执行，所以需要提交&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 如果提交失败&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rollback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 回滚事务&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;finnally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 最后关闭游标，连接&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cursor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python with语句</title>
      <link>https://zhu327.github.io/2014/09/14/python-with%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Sun, 14 Sep 2014 15:08:34 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2014/09/14/python-with%E8%AF%AD%E5%8F%A5/</guid>
      <description>&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ibm.com/developerworks/cn/opensource/os-cn-pythonwith/&#34;&gt;浅谈 Python 的 with 语句&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;概念&#34;&gt;概念&lt;/h3&gt;

&lt;p&gt;上下文管理器:&lt;br /&gt;
实现了&lt;code&gt;__enter__()&lt;/code&gt;与&lt;code&gt;__exit__()&lt;/code&gt;方法的类实例，运行时，先运行&lt;code&gt;__enter__()&lt;/code&gt;方法，再运行目标函数，无论是否抛出错误，都运行&lt;code&gt;__exit__()&lt;/code&gt;方法。&lt;br /&gt;
with语句可以方便的取代&lt;code&gt;try:/except:&lt;/code&gt;语句达到在运行函数前先构建环境，退出函数清理环境的目的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>