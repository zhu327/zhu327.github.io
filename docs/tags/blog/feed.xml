<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on </title>
    <link>https://zhu327.github.io/tags/blog/</link>
    <description>Recent content in Blog on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 13 Apr 2016 21:08:11 +0800</lastBuildDate>
    
	<atom:link href="https://zhu327.github.io/tags/blog/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>博客迁移到github</title>
      <link>https://zhu327.github.io/2016/04/13/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0github/</link>
      <pubDate>Wed, 13 Apr 2016 21:08:11 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2016/04/13/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0github/</guid>
      <description>&lt;h3 id=&#34;为什么迁移&#34;&gt;为什么迁移&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/zhu327/blog&#34;&gt;blog&lt;/a&gt;算是我正式的第一个Python项目，是我入门Python的基石，一直稳定的运行在SAE上，上个月我还进行过一次升级，但是SAE的MySQL服务收费来得太突然，每年大概要花200软妹币，对于一个PaaS平台来说，我认为是不划算的，鉴于静态博客的流行，所以痛下决心迁移到github pages上来。&lt;/p&gt;

&lt;h3 id=&#34;静态博客生成器的选择&#34;&gt;静态博客生成器的选择&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Jekyll&lt;br /&gt;
Jekyll是静态博客生成器的鼻祖，拥有大量的模版，但是基于ruby导致文章较多的情况下会比较慢&lt;/li&gt;
&lt;li&gt;pelican&lt;br /&gt;
python是工作语言，所以本来是最可能选择的就是&lt;a href=&#34;https://github.com/getpelican/pelican&#34;&gt;pelican&lt;/a&gt;，直到我找到hugo&lt;/li&gt;
&lt;li&gt;hugo&lt;br /&gt;
golang实现，最大的优点就是快，而且golang可以编译为二进制文件，所以安装起来非常方便&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blog更新记录</title>
      <link>https://zhu327.github.io/2016/03/07/blog%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 07 Mar 2016 11:23:58 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2016/03/07/blog%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;p&gt;周末花了点时间把许久没有动过的&lt;a href=&#34;https://github.com/zhu327/blog&#34;&gt;Blog&lt;/a&gt;做了一些优化，优化的目标：更快，更省。&lt;/p&gt;

&lt;h3 id=&#34;更快&#34;&gt;更快&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;缓存SQL查询结果&lt;/li&gt;
&lt;li&gt;优化数据库表结构&lt;/li&gt;
&lt;li&gt;优化SQL查询语句&lt;/li&gt;
&lt;li&gt;使用misaka(C写的Markdown解析器)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;更省&#34;&gt;更省&lt;/h3&gt;

&lt;p&gt;用SAE KVDB替换Memcached
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Memcached 优化 MySQL 查询</title>
      <link>https://zhu327.github.io/2014/09/24/memcached-%E4%BC%98%E5%8C%96-mysql-%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Wed, 24 Sep 2014 22:13:57 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2014/09/24/memcached-%E4%BC%98%E5%8C%96-mysql-%E6%9F%A5%E8%AF%A2/</guid>
      <description>&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://bozpy.sinaapp.com&#34;&gt;跬步&lt;/a&gt;上线后，SAE后台显示云豆的消耗http与MySQL查询各占一半，正好SAE还支持Memcached，本着不用白不用的原则，为&lt;a href=&#34;https://github.com/zhu327/blog/blob/memcached/www/transwarp/db.py&#34;&gt;db.py&lt;/a&gt;加上了Memcached的缓存支持。&lt;/p&gt;

&lt;p&gt;网站在并发不大的情况下，MySQL查询时间还感受不出来，但是如果并发大的化，MySQL会显著的降低响应速度，所以Memcached应运而生。&lt;/p&gt;

&lt;p&gt;Memcached是一个分布式的内存key-value存储系统，由于数据保存在内存中所以查询速度非常快，一般作为其它数据的中间缓存层来使用。&lt;/p&gt;

&lt;p&gt;对于SQL查询先以SQL语句为key查询Memcached，如果查到直接返回，如果没有再去查询MySQL，并把结果缓存到Memcached，下次再次查询时速度显著提升，因为Memcached的数据是保存在内存中的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About Blog</title>
      <link>https://zhu327.github.io/2014/09/13/about-blog/</link>
      <pubDate>Sat, 13 Sep 2014 18:20:31 +0800</pubDate>
      
      <guid>https://zhu327.github.io/2014/09/13/about-blog/</guid>
      <description>&lt;p&gt;开源:&lt;a href=&#34;https://github.com/zhu327/blog&#34;&gt;https://github.com/zhu327/blog&lt;/a&gt;&lt;br /&gt;
Boz是一个用Python实现的轻量级Blog程序。&lt;br /&gt;
这是一个练习作品，开始于&lt;a href=&#34;http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001397616003925a3d157284cd24bc0952d6c4a7c9d8c55000&#34;&gt;廖雪峰的Python教程实战篇&lt;/a&gt;。&lt;br /&gt;
感谢廖雪峰提供的教程，让我从这个程序中收获良多。&lt;/p&gt;

&lt;p&gt;Blog现有2个分支：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zhu327/boz/tree/awesome&#34;&gt;awesome&lt;/a&gt;：廖雪峰教程的标准实现&lt;/li&gt;
&lt;li&gt;master：: 部署在SAE(Sina App Engine)的版本&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>